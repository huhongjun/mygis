<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright Â© 2008 ESRI
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/FlexViewer/License.txt
//
////////////////////////////////////////////////////////////////////////////////
-->
<BaseWidget	xmlns:esri			="http://www.esri.com/2008/ags" 
			xmlns				="com.esri.solutions.flexviewer.*" 
			xmlns:mx			="http://www.adobe.com/2006/mxml" 
			xmlns:maplib		="com.esri.maplib.*"
			xmlns:widgets		="com.esri.solutions.flexviewer.widgets.*"
			x					="600" 
			y					="20"  
			widgetConfigLoaded	="init()">
	
	
	<mx:Script>
		<![CDATA[
				
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.Graphic;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.Layer;
			import com.esri.ags.Map;
			import com.esri.ags.symbol.PictureMarkerSymbol;
			import com.esri.ags.tasks.Locator;
			import com.esri.ags.tasks.AddressCandidate;
			import com.esri.serialization.json.*;
			import com.esri.solutions.flexviewer.SiteContainer;
			import com.esri.solutions.flexviewer.utils.WidgetEffects;
			import mx.collections.*;
			import mx.controls.Alert;
			import mx.controls.ComboBox;
			import mx.containers.FormItem;
			import mx.controls.Image;
			import mx.controls.Text;
			import mx.rpc.events.ResultEvent;
						
			//labels
			private var addressLabel:String;
			
			private var coordinatesLabel:String;
			
			private var resultsLabel:String;
			
			[Bindable]
			private var xLabel:String;
			
			[Bindable]
			private var yLabel:String;
			
			[Bindable]
			private var exampleLabel:String;
			
			[Bindable]
			private var exampleValueLabel:String;
			
			[Bindable]
			private var submitLabel:String;
			
			[Bindable]
			private var clearLabel:String;
			
			private var loadingLabel:String;
			
			private var locationsLabel:String;
			
			private var listField:String;
			
			private var listValues:String;
			
			private var listArray:Array;
			
			private var zoomScale:Number = 5000;
			
			private var graphicsLayer:GraphicsLayer;
			
			private var graphicSym:PictureMarkerSymbol;
			
			private var addrFields:Array;
			
			private var addrObjects:Array = [];
			
			private var minscore:Number;
			
			[Bindable]
			private var msgVisible:Boolean = false;
			
			private const ICON_URL:String = "com/esri/solutions/flexviewer/assets/images/icons/";		
				
			private function init():void
			{
				if (configXML)
				{
					//labels
					addressLabel = configXML.labels.addresslabel || "Address";
					coordinatesLabel = configXML.labels.coordinateslabel || "Coordinates";
					resultsLabel = configXML.labels.resultslabel || "Results";
					xLabel = configXML.labels.xlabel || "Longitude (X):";
					yLabel = configXML.labels.ylabel || "Latitude (Y):";
					exampleLabel = configXML.labels.examplelabel || "Example:";
					exampleValueLabel = configXML.labels.examplevaluelabel || "-85.757, 38.174";
					submitLabel = configXML.labels.submitlabel || "Locate";
					clearLabel = configXML.labels.clearlabel || "Clear";
					loadingLabel = configXML.labels.loadinglabel || "Loading...";
					locationsLabel = configXML.labels.locationslabel || "Locations Found:";
					
					graphicsLayer = new GraphicsLayer();
					graphicSym = new PictureMarkerSymbol(widgetIcon, 30, 30)
					graphicsLayer.symbol = graphicSym;
					map.addLayer(graphicsLayer);
					listField = configXML.listfield;
					listValues = configXML.listvalues;
					listArray = listValues.split(",");
					if (Number(configXML.zoomscale) > 0)
						zoomScale = Number(configXML.zoomscale);
					minscore = Number(configXML.minscore) || 40;
					var url:String = configXML.locator;
					locatorService.url = url + "?f=json";
					locator.url = url;
					locatorService.send();
				}
				wTemplate.addTitlebarButton(ICON_URL + "i_table.png", resultsLabel, showStateResults);
				wTemplate.addTitlebarButton(ICON_URL + "i_pushpin.png", coordinatesLabel, showStateCoordinates);
				wTemplate.addTitlebarButton(ICON_URL + "i_mailbox.png", addressLabel, showStateAddress);
			}
					
			private function showStateAddress(event:MouseEvent):void
			{
				WidgetEffects.flipWidget(this, viewStack, "selectedIndex", 0, 400);
			}				
						
			private function showStateCoordinates(event:MouseEvent):void
			{
				WidgetEffects.flipWidget(this, viewStack, "selectedIndex", 1, 400);
			}			
			
			private function showStateResults(event:MouseEvent):void
			{
				WidgetEffects.flipWidget(this, viewStack, "selectedIndex", 2, 400);
			}			
		
			private function onJSONLoad(event:ResultEvent):void
			{
				var rawData:String = String(event.result);
				var data:Object = JSON.decode(rawData)
				addrFields = data.addressFields;
				for (var i:Number = 0; i < addrFields.length; i++)
				{
					var frmItem:FormItem = new FormItem();
					frmItem.styleName = "WidgetText";
					frmItem.label = addrFields[i].name + ": ";
					if (addrFields[i].name != listField)
					{
						var txtItem:TextInput = new TextInput();
						txtItem.id = addrFields[i].name;
						frmItem.addChild(txtItem);
						addrObjects.push(txtItem);
					}
					else
					{
						var cboItem:ComboBox = new ComboBox();
						cboItem.id = addrFields[i].name;
						cboItem.dataProvider = listArray;
						frmItem.addChild(cboItem);
						addrObjects.push(cboItem);
					}
					frmLocateAddress.addChildAt(frmItem, i);
				}
			}
			
			private function locateAddress():void
			{
				graphicsLayer.clear();
				WidgetEffects.flipWidget(this, viewStack, "selectedIndex", 2, 400);	
				var data:Object = new Object();
				for (var i:Number = 0; i < addrObjects.length; i++)
				{
					var name:String = addrObjects[i].id;
					var value:String;
					if (addrObjects[i] is TextInput)
					{
						value = TextInput(addrObjects[i]).text;
					}
					else
					{
						value = ComboBox(addrObjects[i]).selectedLabel;
					}
					data[name] = value;
				}
				locator.addressToLocations(data, null, new ItemResponder(locateResult, locateError));
				showMessage(loadingLabel, true);
			}			
			
			private function locateResult(data:Array, token:Object=null):void
			{
				if (data.length > 0)
				{
					var recAC:ArrayCollection = createRecordData(data);
					wRepeater.dataProvider = recAC;
					this.addSharedData(widgetTitle, recAC);
					showMessage(locationsLabel + " " + recAC.length.toString(), false);
					if (recAC.length > 0)
					{
						showLocation(recAC.getItemAt(0));
					}
				}
			}				
				
			private function locateError(info:Object, token:Object = null):void
			{
				showMessage(info.toString(), false);	
			}			
			
			private function locateCoordinates():void
			{
				graphicsLayer.clear();
				WidgetEffects.flipWidget(this, viewStack, "selectedIndex", 2, 400);
				try
				{
					var long:String = txtLong.text;
					var lat:String = txtLat.text;
					if ((long) && (lat))
					{
						var point:MapPoint = new MapPoint(Number(long), Number(lat));
						var icon:String = widgetIcon;
						var title:String = coordinatesLabel;  
						var content:String = long.toString() + ", " + lat.toString();
						var link:String = "";
						var infoData:Object = 
						{
							icon: icon, 
							title: title, 
							content: content, 
							link: link, 
							point: point,
							geometry: point
						};
						var recAC:ArrayCollection =  new ArrayCollection([infoData]);                
						wRepeater.dataProvider = recAC;
						this.addSharedData(widgetTitle, recAC);
						showLocation(infoData);
						showMessage(locationsLabel, false);
					}
				}
				catch (error:Error)
				{
					showMessage(error.message, false);
				}
			}			
			
			//create record data
			private function createRecordData(data:Array):ArrayCollection
			{
				var recAC:ArrayCollection = new ArrayCollection();
				for each (var addrCandidate:AddressCandidate in data)
				{
					if (addrCandidate.score >= minscore)
					{
						var icon:String = widgetIcon;
						var title:String = addrCandidate.address.toString();  
						if (!title)
							 title = widgetTitle;
						var content:String = "Score: " + addrCandidate.score.toString();
						var link:String = "";
						var point:MapPoint = addrCandidate.location;
						var infoData:Object = 
						{
							icon: icon, 
							title: title, 
							content: content, 
							link: link, 
							point: point,
							geometry: point
						};                 
						recAC.addItem(infoData);
					}
				}
			    return recAC;
			}		
			
			private function showLocation(infoData:Object):void
			{
				var pt:MapPoint = infoData.point
				var ptGraphic:Graphic = new Graphic(); 
				ptGraphic.geometry = pt;    
				ptGraphic.attributes = infoData; 
				ptGraphic.addEventListener(MouseEvent.ROLL_OVER, mouseOverGraphic) 
				graphicsLayer.add(ptGraphic);
				if (map.scale > zoomScale)
					map.scale = zoomScale;
				map.centerAt(pt);
				this.showInfoWindow(infoData);
			}			
			
			private function selectLocation(event:MouseEvent):void
			{
				var infoData:Object = event.currentTarget.infoData;
				showLocation(infoData);
			}			
						
			//mouse over graphic
			private function mouseOverGraphic(event:MouseEvent):void
			{
				var gra:Graphic = event.currentTarget as Graphic;
				var infoData:Object = gra.attributes;
				this.showInfoWindow(infoData);
			}			
	
			private function clear():void
			{
				graphicsLayer.clear();
				for (var i:Number = 0; i < addrObjects.length; i++)
				{
					if (addrObjects[i] is TextInput)
						TextInput(addrObjects[i]).text = "";
				}
				clearMessage();
				txtLong.text = "";
				txtLat.text = "";
				wRepeater.dataProvider = null;
				this.showInfoWindow(null);
			}			
			
			private var hitimer:uint;
					
			private function mouseOverRecord(event:MouseEvent):void
			{
				var infoData:Object = event.currentTarget.infoData;
				clearTimeout(hitimer);
				hitimer = setTimeout(showHighlight, 800, [infoData]);
			}			
			
			private function mouseOutRecord():void
			{
				clearTimeout(hitimer);
				this.showInfoWindow(null);
			}			
			
			private function showHighlight(params:Array):void
			{
				var infoData:Object = params[0];
				var pt:MapPoint = infoData.point;
				//if (!map.extent.contains(pt))
				//	map.centerAt(pt);
				this.showInfoWindow(params[0]);
			}			
			
			private function showMessage(msg:String, swfVisible:Boolean):void
			{
				txtMessage.text = msg;
				swfMessage.visible = swfVisible;
				msgVisible = true;
			}			
			
			private function clearMessage():void
			{
				msgVisible = false;
			}			
			
			private function widgetClosedHandler(event:Event):void
			{
				graphicsLayer.visible = false;
				this.showInfoWindow(null);
			}			
			
			private function widgetOpenedHandler(event:Event):void
			{
				graphicsLayer.visible = true;
			}
			
		]]>
	</mx:Script>
	
	<!-- LOCATOR -->
	<mx:HTTPService	id="locatorService" 
					resultFormat="text" 
					url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Locators/ESRI_Geocode_USA/GeocodeServer?f=json"	
					result="onJSONLoad(event)"/>
					
	<esri:Locator	id="locator" 
					url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Locators/ESRI_Geocode_USA/GeocodeServer" 
					showBusyCursor="true"/>
	
	<WidgetTemplate id="wTemplate" widgetClosed="widgetClosedHandler(event)" widgetOpened="widgetOpenedHandler(event)">
		<mx:ViewStack id="viewStack" width="100%" height="100%" creationPolicy="all">
			<mx:VBox width="100%" height="100%" verticalGap="1">
				<mx:Form id="frmLocateAddress" verticalScrollPolicy="off" paddingBottom="0" width="100%" height="100%">
					<mx:HBox horizontalAlign="center" width="100%">
						<mx:Button label="{submitLabel}" click="locateAddress()"/>
						<mx:Button label="{clearLabel}" click="clear()"/>
					</mx:HBox>
				</mx:Form>
			</mx:VBox>
			<mx:VBox width="100%" height="100%" verticalGap="1">
				<mx:Form id="frmLocateCoords" verticalScrollPolicy="off" paddingBottom="0" width="100%" height="100%">
					<mx:FormItem label="{xLabel}" required="true"  styleName="WidgetText">
						<mx:TextInput id="txtLong" text="" restrict="0-9\.\-"/>
					</mx:FormItem>
					<mx:FormItem label="{yLabel}" required="true" styleName="WidgetText">
						<mx:TextInput id="txtLat" text="" restrict="0-9\.\-"/>
					</mx:FormItem>
					<mx:FormItem label="{exampleLabel}" styleName="WidgetText">
						<mx:Text text="{exampleValueLabel}" styleName="WidgetText"/>
					</mx:FormItem>
					<mx:HBox horizontalAlign="center" width="100%">
						<mx:Button label="{submitLabel}" click="locateCoordinates()"/>
						<mx:Button label="{clearLabel}" click="clear()"/>
					</mx:HBox>
				</mx:Form>
			</mx:VBox>
			<mx:VBox width="100%" height="100%" verticalGap="1">
				<mx:HBox id="boxMessage" visible="{msgVisible}" includeInLayout="{msgVisible}" width="100%">
					<mx:SWFLoader id="swfMessage" source="com/esri/solutions/flexviewer/assets/flash/loader.swf" visible="false" />
					<mx:Text id="txtMessage" text="" styleName="WidgetText" width="90%"/>
				</mx:HBox>
				<mx:Repeater id="wRepeater" width="100%" height="100%">
					<widgets:RecordData infoData="{wRepeater.currentItem}" mouseOver="mouseOverRecord(event)" mouseOut="mouseOutRecord()" click="selectLocation(event)"/>
				</mx:Repeater>
			</mx:VBox>
		</mx:ViewStack>
	</WidgetTemplate>
	
</BaseWidget>
