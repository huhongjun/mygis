<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright Â© 2008 ESRI
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/FlexViewer/License.txt
//
////////////////////////////////////////////////////////////////////////////////
-->
<BaseWidget xmlns:esri			="http://www.esri.com/2008/ags" 
			xmlns				="com.esri.solutions.flexviewer.*" 
			xmlns:mx			="http://www.adobe.com/2006/mxml" 
			xmlns:mxeffects		="com.adobe.ac.mxeffects.*"
			xmlns:widgets		="com.esri.solutions.flexviewer.widgets.*"
			x					="600" 
			y					="300"  
			widgetConfigLoaded	="init()">
	
	
	<mx:Script>
		<![CDATA[
			
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.Graphic;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.Layer;
			import com.esri.ags.Map;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.symbol.SimpleFillSymbol;
			import com.esri.ags.symbol.SimpleLineSymbol;
			import com.esri.ags.symbol.SimpleMarkerSymbol;
			import com.esri.ags.symbol.TextSymbol;
			import com.esri.ags.toolbars.Draw;
			import com.esri.solutions.flexviewer.SiteContainer;
			import com.esri.solutions.flexviewer.utils.WidgetEffects;
			import mx.collections.*;
			import mx.controls.Alert;
			import mx.rpc.AsyncResponder; 
			import mx.rpc.events.ResultEvent;			
			
			//labels
			private var drawLabel:String;
			
			private var measurementsLabel:String;
			
			[Bindable]
			private var pointLabel:String;
			
			[Bindable]
			private var lineLabel:String;
			
			[Bindable]
			private var freehandlineLabel:String;
			
			[Bindable]
			private var polygonLabel:String;
			
			[Bindable]
			private var freehandpolygonLabel:String;
			
			[Bindable]
			private var drawtextLabel:String;
			
			[Bindable]
			private var clearLabel:String;
			
			[Bindable]
			private var textLabel:String;
			
			[Bindable]
			private var colorLabel:String;
			
			[Bindable]
			private var sizeLabel:String;
			
			[Bindable]
			private var showmeasurementsLabel:String;
			
			[Bindable]
			private var distanceUnitsLabel:String;
			
			[Bindable]
			private var areaUnitsLabel:String;
			
			private var areaLabel:String;
			
			private var perimeterLabel:String;
			
			private var lengthLabel:String;
			
			private var spatialref:Number = 32618;
						
			[Bindable]
			private var configDistance:Array;
			
			[Bindable]
			private var configArea:Array;
			
			private var drawMode:String;
			
			private var measurePt:MapPoint;
			
			private var graphicsLayer:GraphicsLayer;
						
			private const ICON_URL:String = "com/esri/solutions/flexviewer/assets/images/icons/";
			
			private const TEXT_MODE:String = "text";
						
			private function init():void
			{
				graphicsLayer = new GraphicsLayer();
				map.addLayer(graphicsLayer);
				if (configXML)
				{
					//labels
					drawLabel = configXML.labels.drawlabel || "Draw";
					measurementsLabel = configXML.labels.measurementslabel || "Measurements";
					pointLabel = configXML.labels.pointlabel || "Draw Point";
					lineLabel = configXML.labels.linelabel || "Draw Line";
					freehandlineLabel = configXML.labels.freehandlinelabel || "Draw Freehand Line";
					polygonLabel = configXML.labels.polygonlabel || "Draw Polygon";
					freehandpolygonLabel = configXML.labels.freehandpolygonlabel || "Draw Freehand Polygon";
					drawtextLabel = configXML.labels.drawtextlabel || "Draw Text";
					clearLabel = configXML.labels.clearlabel || "Clear Drawing";
					textLabel = configXML.labels.textlabel || "Text:";
					colorLabel = configXML.labels.colorlabel || "Color:";
					sizeLabel = configXML.labels.sizelabel || "Size:";
					showmeasurementsLabel = configXML.labels.showmeasurementslabel || "Show Measurements:";	
					distanceUnitsLabel = configXML.labels.distanceunitslabel || "Distance Units:";	
					areaUnitsLabel = configXML.labels.areaunitslabel || "Area Units:";
					areaLabel = configXML.labels.arealabel || "Area:";
					perimeterLabel = configXML.labels.perimeterlabel || "Perimeter:";
					lengthLabel = configXML.labels.lengthlabel || "Length:";
					if (Number(configXML.spatialref) > 0)
						spatialref = Number(configXML.spatialref);
					
					geometryService.url  = configXML.geometryservice;
					var distanceList:XMLList = configXML..distanceunit;
					var areaList:XMLList = configXML..areaunit;
					var i:Number;
					configDistance = new Array()
					for (i = 0; i < distanceList.length(); i++)
					{
						var dLabel:String = distanceList[i];
						var dAbbr:String = distanceList[i].@abbr;
						var dConversion:Number = Number(distanceList[i].@conversion);
						var dUnit:Object = 
						{
							label: dLabel,
							abbr: dAbbr,
							conversion: dConversion
						}
						configDistance.push(dUnit);
					}
					cboDistance.dataProvider = configDistance;
					configArea = [];
					for (i = 0; i < areaList.length(); i++)
					{
						var aLabel:String = areaList[i];
						var aAbbr:String = areaList[i].@abbr;
						var aConversion:Number = Number(areaList[i].@conversion);
						var aUnit:Object = 
						{
							label: aLabel,
							abbr: aAbbr,
							conversion: aConversion
						}
						configArea.push(aUnit);
					}
					cboArea.dataProvider = configArea;	
				}
				wTemplate.addTitlebarButton(ICON_URL + "i_measure.png", measurementsLabel, showStateMeasurements);
				wTemplate.addTitlebarButton(ICON_URL + "i_draw.png", drawLabel, showStateDraw);	
			}			
			
			private function activateDrawTool(value:String, mode:String):void
			{
				drawMode = mode;
				var status:String;
				switch (value)
				{
					case Draw.MAPPOINT:
					{
						status = pointLabel;
						if (mode == TEXT_MODE)
							status = drawtextLabel;
						break;
					}
					
					case Draw.POLYLINE:
					{
						status = lineLabel;
						break;
					}
					
					case Draw.FREEHAND_POLYLINE:
					{
						status = freehandlineLabel;
						break;
					}
					
					case Draw.POLYGON:
					{
						status = polygonLabel;
						break;
					}
					
					case Draw.FREEHAND_POLYGON:
					{
						status = freehandpolygonLabel;
						break;
					}
				}
				setMapAction(value, status, drawEnd);;		
			}			
			
			private function drawEnd(event:DrawEvent):void
			{
				var outSR:SpatialReference = new SpatialReference(spatialref);
				var geom:Geometry = event.graphic.geometry;
				var gra:Graphic = new Graphic(geom);
				switch (geom.type)  
                {         
                	case Geometry.MAPPOINT:
                	{
                		if (drawMode == TEXT_MODE)
                		{
                			var txtSym:TextSymbol = new TextSymbol(txtLabel.text);
                			var txtFormat:TextFormat = new TextFormat("Arial", numGraphic.value, cpGraphic.selectedColor);
                			txtSym.textFormat = txtFormat;
	                		gra.symbol = txtSym;
                		}
                		else
                		{
	                		var ptSym:SimpleMarkerSymbol = new SimpleMarkerSymbol("circle", numGraphic.value, cpGraphic.selectedColor);
	                		gra.symbol = ptSym;
	                		if (chkMeasurements.selected)
	                		{
		                		measurePt = geom as MapPoint;
		                		addDrawLabel(numFormatter.format(measurePt.x) + ", " + numFormatter.format(measurePt.y));
	                		}
                		}
                		break;
                	}
                		
                	case Geometry.POLYLINE:
                	{
                		var lineSym:SimpleLineSymbol = new SimpleLineSymbol("solid",cpGraphic.selectedColor, 1, numGraphic.value);
                		gra.symbol = lineSym;
                		if (chkMeasurements.selected)
	                	{
	                		geometryService.project([gra],outSR);
	                		var line:Polyline = geom as Polyline;
							measurePt = line.extent.center;
	                	}
                		break;
                	}
                		              
                	case Geometry.POLYGON:
                	{
                		var outlineSym:SimpleLineSymbol = new SimpleLineSymbol("solid",cpGraphic.selectedColor, 1, 2);
                		var polySym:SimpleFillSymbol = new SimpleFillSymbol("solid", cpGraphic.selectedColor, 0.15, outlineSym);
                		gra.symbol = polySym;
                		if (chkMeasurements.selected)
	                	{
	                		geometryService.project([gra],outSR);
	                		var poly:Polygon = geom as Polygon;
							measurePt = poly.extent.center;
	                	}
                		break;
                	}
                }
                graphicsLayer.add(gra);
			}			
			
			private function projectCompleteHandler(event:GeometryServiceEvent):void
			{
				var geom:Geometry = event.graphics[0].geometry; 
				var newGraphic:Graphic = new Graphic(geom);                
				geometryService.areasAndLengths([newGraphic]);
				switch (geom.type)
				{
					case Geometry.POLYLINE:
					{
						geometryService.lengths([newGraphic]);
						break;
					}
					
					case Geometry.POLYGON:
					{
						geometryService.areasAndLengths([newGraphic]);
						break;
					}
				}
			}			
			
			private function areaslengthsCompleteHandler(event:GeometryServiceEvent):void
            {   
                var area:Number = event.arealengths.areas[0];
                var length:Number = event.arealengths.lengths[0];
                var abbrArea:String = cboArea.selectedItem.abbr;
                var convArea:Number = cboArea.selectedItem.conversion;
                var abbrDist:String = cboDistance.selectedItem.abbr;
                var convDist:Number = cboDistance.selectedItem.conversion;
                var label:String = areaLabel + " " + numFormatter.format(area * convArea) + " " + abbrArea;
                label += "\n" + perimeterLabel + " " +  numFormatter.format(length * convDist) + " " + abbrDist;
                addDrawLabel(label);
            }            
            
            private function lengthsCompleteHandler(event:GeometryServiceEvent):void
            {   
                var length:Number = event.lengths[0];
                var abbrDist:String = cboDistance.selectedItem.abbr;
                var convDist:Number = cboDistance.selectedItem.conversion;
                var label:String = lengthLabel + " " +  numFormatter.format(length * convDist) + " " + abbrDist;
                addDrawLabel(label);
            }            
            
            private function addDrawLabel(label:String):void
            {
            	var txtSym:TextSymbol = new TextSymbol(label);
            	txtSym.yoffset = 8;
            	var txtFormat:TextFormat = new TextFormat("Arial", 12, cpGraphic.selectedColor,true );
                txtSym.textFormat = txtFormat;
                var gra:Graphic = new Graphic(measurePt);
	            gra.symbol = txtSym;
	            graphicsLayer.add(gra);
            }						
			
			private function clear():void
			{
				graphicsLayer.clear();
			}
						
			private function widgetClosedHandler(event:Event):void
			{
				graphicsLayer.visible = false;
				setMapNavigation(null, null);
			}
						
			private function widgetOpenedHandler(event:Event):void
			{	
				graphicsLayer.visible = true;
			}
						
			private function showStateDraw(event:MouseEvent):void
			{
				WidgetEffects.flipWidget(this, viewStack, "selectedIndex", 0, 400);
			}
										
			private function showStateMeasurements(event:MouseEvent):void
			{
				WidgetEffects.flipWidget(this, viewStack, "selectedIndex", 1, 400);
			}
			
		]]>
	</mx:Script>
	
	<esri:GeometryService 	id="geometryService"
							url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer" 
							projectComplete="projectCompleteHandler(event)" 
							lengthsComplete="lengthsCompleteHandler(event)" 
							arealengthsComplete="areaslengthsCompleteHandler(event)"/> 
	
	<mx:NumberFormatter		id="numFormatter" 
							useThousandsSeparator="true" 
							precision="2"/>
	
	<WidgetTemplate id="wTemplate" widgetClosed="widgetClosedHandler(event)" widgetOpened="widgetOpenedHandler(event)">
		<mx:ViewStack id="viewStack" width="100%" height="100%" creationPolicy="all" paddingTop="4">
			<mx:VBox width="100%" height="100%" verticalGap="4">
				<mx:HBox horizontalAlign="center" width="100%" horizontalGap="8">
					<mx:Image click="{activateDrawTool(Draw.MAPPOINT, null)}" source="com/esri/solutions/flexviewer/assets/images/icons/i_draw_point.png" useHandCursor="true" buttonMode="true" toolTip="{pointLabel}" width="40" height="40"/>
					<mx:Image click="{activateDrawTool(Draw.POLYLINE, null)}" source="com/esri/solutions/flexviewer/assets/images/icons/i_draw_line.png" useHandCursor="true" buttonMode="true" toolTip="{lineLabel}" width="40" height="40"/>
					<mx:Image click="{activateDrawTool(Draw.FREEHAND_POLYLINE, null)}" source="com/esri/solutions/flexviewer/assets/images/icons/i_draw_freeline.png" useHandCursor="true" buttonMode="true" toolTip="{freehandlineLabel}" width="40" height="40"/>
					<mx:Image click="{activateDrawTool(Draw.POLYGON, null)}" source="com/esri/solutions/flexviewer/assets/images/icons/i_draw_poly.png" useHandCursor="true" buttonMode="true" toolTip="{polygonLabel}" width="40" height="40"/>
					<mx:Image click="{activateDrawTool(Draw.FREEHAND_POLYGON, null)}" source="com/esri/solutions/flexviewer/assets/images/icons/i_draw_freepoly.png" useHandCursor="true" buttonMode="true" toolTip="{freehandpolygonLabel}" width="40" height="40"/>
					<mx:Image click="{activateDrawTool(Draw.MAPPOINT, TEXT_MODE)}" source="com/esri/solutions/flexviewer/assets/images/icons/i_draw_text.png" useHandCursor="true" buttonMode="true" toolTip="{drawtextLabel}" width="40" height="40"/>
					<mx:Image click="clear()" source="com/esri/solutions/flexviewer/assets/images/icons/i_clear.png" useHandCursor="true" buttonMode="true" toolTip="{clearLabel}" width="40" height="40"/>
				</mx:HBox>
				<mx:Form id="frmDraw" verticalScrollPolicy="off" paddingBottom="0" width="100%" height="100%">
					<mx:FormItem label="{textLabel}" styleName="WidgetText" width="100%">
						<mx:TextInput id="txtLabel" text="" width="60%"/>
					</mx:FormItem>
					<mx:FormItem label="{colorLabel}" styleName="WidgetText" width="100%">
						<mx:ColorPicker id="cpGraphic"/>
					</mx:FormItem>
					<mx:FormItem label="{sizeLabel}" styleName="WidgetText" width="100%">
						<mx:NumericStepper id="numGraphic" minimum="0" maximum="50" value="10"/>
					</mx:FormItem>
				</mx:Form>
			</mx:VBox>
			<mx:VBox width="100%" height="100%" verticalGap="1">
				<mx:Form id="frmMeasurements" verticalScrollPolicy="off" paddingBottom="0" width="100%" height="100%">
					<mx:FormItem label="{showmeasurementsLabel}" styleName="WidgetText" width="100%">
						<mx:CheckBox id="chkMeasurements" />
					</mx:FormItem>
					<mx:FormItem label="{distanceUnitsLabel}" styleName="WidgetText" width="100%">
						<mx:ComboBox id="cboDistance"/>
					</mx:FormItem>
					<mx:FormItem label="{areaUnitsLabel}" styleName="WidgetText" width="100%">
						<mx:ComboBox id="cboArea"/>
					</mx:FormItem>
				</mx:Form>
			</mx:VBox>
		</mx:ViewStack>
	</WidgetTemplate>
	
</BaseWidget>
