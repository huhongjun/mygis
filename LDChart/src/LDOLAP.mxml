<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" scriptTimeLimit="60" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600" applicationComplete="initApp()" height="658" width="1397">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<fx:XML source="asset/thunder20090616A.xml" id="thunder" />
		
		<mx:XMLListCollection id="cubedp"/>
		<mx:OLAPCube name="FlatSchemaCube" id="myMXMLCube" dataProvider="{cubedp}" complete="runQuery('XIAN')">  
			<mx:OLAPDimension name="AreaDim" displayName="区县">  
				<mx:OLAPAttribute name="XIAN" dataField="@XIAN" displayName="区县" />  
				<mx:OLAPHierarchy name="Power-AreadHier" hasAll="true" >  
					<mx:OLAPLevel attributeName="XIAN" />  
				</mx:OLAPHierarchy>   
			</mx:OLAPDimension>  
			
			<mx:OLAPDimension name="PeriodDim">  
				<mx:OLAPAttribute name="period" dataField="@period" displayName="时辰"/>  
				<mx:OLAPHierarchy name="Power-PeriodHier" hasAll="true">  
					<mx:OLAPLevel attributeName="period"/>  
				</mx:OLAPHierarchy>   
			</mx:OLAPDimension>  

			<mx:OLAPDimension name="PhaseDim">  
				<mx:OLAPAttribute name="phase" dataField="@phase" displayName="强度"/>  
				<mx:OLAPHierarchy name="Power-PhaseHier" hasAll="true">  
					<mx:OLAPLevel attributeName="phase"/>  
				</mx:OLAPHierarchy>   
			</mx:OLAPDimension>  

			<mx:OLAPMeasure name="QCount" dataField="@INTENSION" aggregator="COUNT"/>
			
		</mx:OLAPCube>
		<fx:Array id="chartGridLines">
			<mx:GridLines gridDirection="both" />
		</fx:Array>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import flash.external.ExternalInterface;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.events.CubeEvent;
			import mx.messaging.messages.ErrorMessage;
			import mx.olap.IOLAPCube;
			import mx.olap.IOLAPQuery;
			import mx.olap.IOLAPQueryAxis;
			import mx.olap.OLAPAxisPosition;
			import mx.olap.OLAPQuery;
			import mx.olap.OLAPResult;
			import mx.olap.OLAPSet;
			import mx.olap.OLAPTuple;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
				
			private var queryType:String;
						
			private function initApp():void
			{
				var js:Boolean = ExternalInterface.available;
				msg.text = js.toString();
				
//				for each(var x:XML in thunder.row)
//				{
//					x.@INTENSION = Math.abs(x.@INTENSION*10);
//					x.@period = x.@FLASHTIME.substr(10,2);				// 24个时辰
//					x.@phase = Math.floor((x.@INTENSION - x.@INTENSION%50)/10);				// 用5分段
//					
//				}
				
				cubedp.source = thunder.row;
				myMXMLCube.refresh();

			}
			
			private function runQuery(type:String):void { 
				queryType = type;
				
				// Get cube. 
				var cube:IOLAPCube = IOLAPCube(myMXMLCube); 
				// Create a query instance. 
				var query:IOLAPQuery = getQuery(cube, type); 
				// Execute the query. 
				var token:AsyncToken = cube.execute(query); 
				// Set up handlers for the query results. 
				token.addResponder(new AsyncResponder(showResult, showFault)); 
			} 

			// Create the OLAP query. 
			private function getQuery(cube:IOLAPCube, type:String):IOLAPQuery { 
				// Create an instance of OLAPQuery to represent the query.  
				var query:OLAPQuery = new OLAPQuery; 
				
				// Get the row axis from the query instance. 
				var rowQueryAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.ROW_AXIS); 
				var colQueryAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.COLUMN_AXIS); 

				var olapSet1:OLAPSet = new OLAPSet;
				var olapSet2:OLAPSet= new OLAPSet; 

				switch(type){
					case "XIAN":
						
						olapSet1.addElements( cube.findDimension("PeriodDim").findAttribute("period").members);
						rowQueryAxis.addSet(olapSet1);
						
						olapSet2.addElements(cube.findDimension("AreaDim").findAttribute("XIAN").members); // 查询对象
						colQueryAxis.addSet(olapSet2); 
						
						break;
					
					case "PERIOD":
						
						olapSet1.addElements( cube.findDimension("PeriodDim").findAttribute("period").members); 	
						colQueryAxis.addSet(olapSet1); 
						
						olapSet2.addElements(cube.findDimension("AreaDim").findAttribute("XIAN").members); // 查询对象
						rowQueryAxis.addSet(olapSet2); 
						
						break;
					
					case "PHASE":

						olapSet1.addElements( cube.findDimension("PhaseDim").findAttribute("phase").members); 	
						colQueryAxis.addSet(olapSet1); 
						
						olapSet2.addElements(cube.findDimension("AreaDim").findAttribute("XIAN").members); // 查询对象
						rowQueryAxis.addSet(olapSet2); 
						
						break;
				}

				
				// 使用默认计算
				// Create the slicer axis.   
//				var slicerQueryAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.SLICER_AXIS);     
//				// Create an OLAPSet instance to configure the axis.  
//				var cthreshholdSet:OLAPSet= new OLAPSet;  
//				// Use OLAPDimension.findMember() to add the Cost measure.  
//				cthreshholdSet.addElement(cube.findDimension("Measures").findMember("QCountForArea"));  
//				slicerQueryAxis.addSet(cthreshholdSet);  
				
				return query;        
			}
			
			// Handle a query fault. 
			private function showFault(error:ErrorMessage, token:Object):void { 
				Alert.show(error.faultString); 
			} 
			
			// Handle a successful query by passing the query results to  
			// the OLAPDataGrid control.. 
			private var cubeResult:OLAPResult;
			private function showResult(result:Object, token:Object):void { 
				if (!result) { 
					Alert.show("No results from query."); 
					return; 
				} 
				
				cubeResult = result as OLAPResult;

				/////////////////////
				// 额外工作：获取三维数据
				var dataXML:XML= 	<ds/>;
				var rowLength:Number = cubeResult.getAxis(OLAPQuery.ROW_AXIS).positions.length;
				
				var newChartData:Array = [];
				
				for(var iRow:int=0;iRow<rowLength;iRow++)
				{
					var rowAxis:IOLAPQueryAxis = cubeResult.query.getAxis(OLAPQuery.ROW_AXIS);
					var rowTuple:OLAPTuple = rowAxis.tuples[iRow];
					var rowKey:String = rowTuple.explicitMembers.toArray().join(",");
					
					if (rowKey.indexOf("(All)") > -1) 
					{
						rowKey="All";						
					}else
					{
						rowKey = rowKey.split(".").reverse().join();
						rowKey = rowKey.substr(1,rowKey.indexOf("]",0) -1);
					}
					
					
					var colAxis:IOLAPQueryAxis = cubeResult.query.getAxis(OLAPQuery.COLUMN_AXIS);
					var columnLength:Number = cubeResult.getAxis(OLAPQuery.COLUMN_AXIS).positions.length;
					
					for (var i:int=0;i<columnLength;i++) {
						var tuple:OLAPTuple = colAxis.tuples[i];
						var key:String = tuple.explicitMembers.toArray().join(",");
						if (key.indexOf("(All)") > -1) 
							continue;            
						
						key = key.split(".").reverse().join();
						key = key.substr(1,key.indexOf("]",0) -1);
						
						var measureValue:Number = cubeResult.getCell(iRow, i).value;
						
						newChartData.push({row:rowKey, key:key, value:measureValue});
						var xmlRow:XML = <r/>
						
						xmlRow.@row = rowKey;
						xmlRow.@col = key;
						xmlRow.@value = measureValue;
						
						dataXML.appendChild(xmlRow);
						
					}					
				}
				
				// 使用DataGrid显示从OLAPDataGrid中抽取的数据
				var nameSort:Sort = new Sort();
				nameSort.fields = [new SortField('@col', true,false,true)];

				var xmlLC:XMLListCollection = new XMLListCollection(dataXML.r.(@row=="All"));
				
				xmlLC.sort = nameSort;
				xmlLC.refresh();

				switch(queryType){
					case "XIAN":
						
						xianOLAPDG.dataProvider= cubeResult; 
						xianDataGrid.dataProvider = dataXML.r;
						xianColumnChart.dataProvider = xmlLC;
						
						this.runQuery("PERIOD")
						
						break;
					case "PERIOD":

						periodOLAPDG.dataProvider = cubeResult;
						periodDataGrid.dataProvider = dataXML.r;
						periodLineChart.dataProvider = xmlLC;
						
						this.runQuery("PHASE")
						
						break;
					case "PHASE":

						phaseOLAPDG.dataProvider = cubeResult;
						phaseDataGrid.dataProvider = dataXML.r;
						phaseColumnChart.dataProvider = xmlLC;
						
						break;
				}
			}
			
			private function showAllArea():void
			{
				ExternalInterface.call("showAllArea","showAllArea from Flex");
			}
		]]>
	</fx:Script>
			
	<mx:TabNavigator x="225.7" y="27.3" width="1128" height="617" creationPolicy="all">
		<s:NavigatorContent label="按行政区显示" width="100%" height="100%">
			<mx:Canvas width="100%" height="100%">
				<mx:ColumnChart x="10" y="295" id="xianColumnChart" width="863" height="278" >
					<mx:horizontalAxis>
						<mx:CategoryAxis categoryField="@col"/>
					</mx:horizontalAxis>
					
					<mx:series>
						<mx:ColumnSeries displayName="" xField="@col" yField="@value">
			                <mx:stroke>
			                     <mx:Stroke color="black" weight="1" alpha="1.0" />
			                </mx:stroke>							
							<mx:fills>
								<mx:SolidColor color="0xFE0002"/>
								<mx:SolidColor color="0xEED0FF"/>
								<mx:SolidColor color="0xF5AAA6"/>
								<mx:SolidColor color="0xF9D425"/>
								<mx:SolidColor color="0x0000F9"/>
							</mx:fills>
						</mx:ColumnSeries>
					</mx:series>
					<mx:seriesFilters>  
						<fx:Array/>  
					</mx:seriesFilters>  					
				</mx:ColumnChart>
				
				<mx:OLAPDataGrid id="xianOLAPDG" x="10" y="8" width="863" height="268" defaultCellString="0"/>
				
				<mx:DataGrid id="xianDataGrid" width="218" height="563" y="9.75" x="897.95">
					<mx:columns>
						<mx:DataGridColumn headerText="行" dataField="@row"/>
						<mx:DataGridColumn headerText="列" dataField="@col"/>
						<mx:DataGridColumn headerText="值" dataField="@value"/>
					</mx:columns>
				</mx:DataGrid>
				
			</mx:Canvas>
		</s:NavigatorContent>
		<s:NavigatorContent label="按时间显示" width="100%" height="100%">
			<mx:LineChart id="periodLineChart" x="10" y="333.5" width="876" height="238" backgroundElements="{chartGridLines}">
				<mx:horizontalAxis>
					<mx:LinearAxis minimum="0" maximum="23" interval="1" />
				</mx:horizontalAxis>
				<mx:series>
					<mx:LineSeries displayName="" form="curve" xField="@col" yField="@value" />
				</mx:series>
			</mx:LineChart>
			<mx:OLAPDataGrid id="periodOLAPDG" x="14" y="9" width="870" height="294" defaultCellString="0"/>
			<mx:DataGrid id="periodDataGrid" width="223" height="564" y="8.75" x="921.95">
				<mx:columns>
					<mx:DataGridColumn headerText="行" dataField="@row"/>
					<mx:DataGridColumn headerText="列" dataField="@col"/>
					<mx:DataGridColumn headerText="值" dataField="@value"/>
				</mx:columns>
			</mx:DataGrid>
		</s:NavigatorContent>
		<s:NavigatorContent label="按强度显示" width="100%" height="100%">
			<mx:Canvas width="100%" height="100%">
				<mx:ColumnChart x="10" y="295" id="phaseColumnChart" width="859" height="278" showDataTips="true">
					<mx:horizontalAxis>
						<mx:CategoryAxis title="强度(KA)"  dataProvider="{[0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90]}" />
					</mx:horizontalAxis>
					
					<mx:series>
						<mx:ColumnSeries displayName="数量" xField="@col" yField="@value" width="50" >
							<mx:fills>
								<mx:SolidColor color="0xFE00FE"/>
								<mx:SolidColor color="0x000000"/>
								<mx:SolidColor color="0x9999CC"/>
								<mx:SolidColor color="0xF9D425"/>
								<mx:SolidColor color="0x0402E0"/>
							</mx:fills>
						</mx:ColumnSeries>
					</mx:series>
				</mx:ColumnChart>
				
				<mx:OLAPDataGrid id="phaseOLAPDG" x="10" y="8" width="859" height="268" defaultCellString="0"/>
				
				<mx:DataGrid id="phaseDataGrid" width="217" height="564" y="8.75" x="882.95">
					<mx:columns>
						<mx:DataGridColumn headerText="行" dataField="@row"/>
						<mx:DataGridColumn headerText="列" dataField="@col"/>
						<mx:DataGridColumn headerText="值" dataField="@value"/>
					</mx:columns>
				</mx:DataGrid>
				
			</mx:Canvas>
			
		</s:NavigatorContent>
		<s:NavigatorContent label="数据分析" width="100%" height="100%">
			<mx:DataGrid id="dataGrid" dataProvider="{thunder.row}" width="1043" height="461" y="0" x="10">
				<mx:columns>
					<mx:DataGridColumn headerText="序号" dataField="@idx"/>
					<mx:DataGridColumn headerText="放电" dataField="@INTENSION"/>
					<mx:DataGridColumn headerText="时间" dataField="@FLASHTIME"/>
					<mx:DataGridColumn headerText="时辰" dataField="@period"/>
					<mx:DataGridColumn headerText="区县" dataField="@XIAN"/>
					<mx:DataGridColumn headerText="强度分区" dataField="@phase"/>
				</mx:columns>
			</mx:DataGrid>
		</s:NavigatorContent>
		
	</mx:TabNavigator>
	<mx:Accordion x="1.7" y="25.35" width="225" height="619">
		<s:NavigatorContent label="雷电可视化监测" width="100%" height="100%">
			<mx:Accordion x="10" y="10" width="178" height="339">
				<s:NavigatorContent label="北京市全区雷电监视" width="100%" height="100%">
					<s:Button x="96" y="92" label="showAll" click="showAllArea()"/>
					<mx:DateField x="10" y="10" width="156"/>
				</s:NavigatorContent>
				<s:NavigatorContent label="按行政区雷电监视" width="100%" height="100%">
				</s:NavigatorContent>
				<s:NavigatorContent label="按线路雷电监视" width="100%" height="100%">
				</s:NavigatorContent>
			</mx:Accordion>
		</s:NavigatorContent>
		<s:NavigatorContent label="线路事故雷击查询" width="100%" height="100%">
		</s:NavigatorContent>
		<s:NavigatorContent label="雷电趋势查询" width="100%" height="100%">
		</s:NavigatorContent>
		<s:NavigatorContent label="统计报表" width="100%" height="100%">
		</s:NavigatorContent>
		<s:NavigatorContent label="系统帮助" width="100%" height="100%">
		</s:NavigatorContent>
	</mx:Accordion>
	<s:TextInput x="1225" y="10" id="msg"/>
</s:Application>
