<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="initComponent(event)" xmlns:thunderservice="services.thunderservice.*">

	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		
		<mx:ArrayCollection id="cubedp"/>
		<mx:OLAPCube name="FlatSchemaCube" id="myMXMLCube" dataProvider="{cubedp}" complete="runQuery('XIAN')">  
			<mx:OLAPDimension name="AreaDim" displayName="区县">  
				<mx:OLAPAttribute name="XIAN" dataField="xian" displayName="区县" />  
				<mx:OLAPHierarchy name="Power-AreadHier" hasAll="true" >  
					<mx:OLAPLevel attributeName="XIAN" />  
				</mx:OLAPHierarchy>   
			</mx:OLAPDimension>  
			
			<mx:OLAPDimension name="PeriodDim">  
				<mx:OLAPAttribute name="period" dataField="period" displayName="时辰"/>  
				<mx:OLAPHierarchy name="Power-PeriodHier" hasAll="true">  
					<mx:OLAPLevel attributeName="period"/>  
				</mx:OLAPHierarchy>   
			</mx:OLAPDimension>  
			
			<mx:OLAPDimension name="PhaseDim">  
				<mx:OLAPAttribute name="phase" dataField="phase" displayName="强度"/>  
				<mx:OLAPHierarchy name="Power-PhaseHier" hasAll="true">  
					<mx:OLAPLevel attributeName="phase"/>  
				</mx:OLAPHierarchy>   
			</mx:OLAPDimension>  
			
			<mx:OLAPMeasure name="QCount" dataField="phase" aggregator="COUNT"/>
			
		</mx:OLAPCube>
		<fx:Array id="chartGridLines">
			<mx:GridLines gridDirection="both" />
		</fx:Array>
		<s:CallResponder id="getThunderForChartAllResult"/>
		<thunderservice:ThunderService id="thunderService" result="thunderService_resultHandler(event)" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" showBusyCursor="true"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import component.mapext.ThunderMap;
			
			import flash.external.ExternalInterface;
			
			import mx.charts.HitData;
			import mx.charts.series.items.ColumnSeriesItem;
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.CubeEvent;
			import mx.messaging.messages.ErrorMessage;
			import mx.olap.IOLAPCube;
			import mx.olap.IOLAPQuery;
			import mx.olap.IOLAPQueryAxis;
			import mx.olap.OLAPAxisPosition;
			import mx.olap.OLAPQuery;
			import mx.olap.OLAPResult;
			import mx.olap.OLAPSet;
			import mx.olap.OLAPTuple;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.ResultEvent;
			
			private var queryType:String;
			public var map:ThunderMap;
			
			private function initComponent(event:Event):void
			{
				var js:Boolean = ExternalInterface.available;
				
			}
			
			public function setQuery(dateQSStr:String, dateZZStr:String):void
			{
				markLabel.text = "日期：("+dateQSStr +","+dateZZStr+")";
				
				getThunderForChartAllResult.token = thunderService.getThunderForChartAll(dateQSStr,dateZZStr);
				
			}
			
			protected function thunderService_resultHandler(event:ResultEvent):void
			{
				// TODO Auto-generated method stub
				cubedp = getThunderForChartAllResult.lastResult;
				map.addFeatureLayerThunder("");
				myMXMLCube.refresh();
				
			}
			
			private function runQuery(type:String):void { 
				queryType = type;
				
				// Get cube. 
				var cube:IOLAPCube = IOLAPCube(myMXMLCube); 
				// Create a query instance. 
				var query:IOLAPQuery = getQuery(cube, type); 
				// Execute the query. 
				var token:AsyncToken = cube.execute(query); 
				// Set up handlers for the query results. 
				token.addResponder(new AsyncResponder(showResult, showFault)); 
			} 
			
			// Create the OLAP query. 
			private function getQuery(cube:IOLAPCube, type:String):IOLAPQuery { 
				// Create an instance of OLAPQuery to represent the query.  
				var query:OLAPQuery = new OLAPQuery; 
				
				// Get the row axis from the query instance. 
				var rowQueryAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.ROW_AXIS); 
				var colQueryAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.COLUMN_AXIS); 
				
				var olapSet1:OLAPSet = new OLAPSet;
				var olapSet2:OLAPSet= new OLAPSet; 
				
				switch(type){
					case "XIAN":
						
						olapSet1.addElements( cube.findDimension("PeriodDim").findAttribute("period").members);
						rowQueryAxis.addSet(olapSet1);
						
						olapSet2.addElements(cube.findDimension("AreaDim").findAttribute("XIAN").members); // 查询对象
						colQueryAxis.addSet(olapSet2); 
						
						break;
					
					case "PERIOD":
						
						olapSet1.addElements( cube.findDimension("PeriodDim").findAttribute("period").members); 	
						colQueryAxis.addSet(olapSet1); 
						
						olapSet2.addElements(cube.findDimension("AreaDim").findAttribute("XIAN").members); // 查询对象
						rowQueryAxis.addSet(olapSet2); 
						
						break;
					
					case "PHASE":
						
						olapSet1.addElements( cube.findDimension("PhaseDim").findAttribute("phase").members); 	
						colQueryAxis.addSet(olapSet1); 
						
						olapSet2.addElements(cube.findDimension("AreaDim").findAttribute("XIAN").members); // 查询对象
						rowQueryAxis.addSet(olapSet2); 
						
						break;
				}
				
				
				// 使用默认计算
				// Create the slicer axis.   
				//				var slicerQueryAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.SLICER_AXIS);     
				//				// Create an OLAPSet instance to configure the axis.  
				//				var cthreshholdSet:OLAPSet= new OLAPSet;  
				//				// Use OLAPDimension.findMember() to add the Cost measure.  
				//				cthreshholdSet.addElement(cube.findDimension("Measures").findMember("QCountForArea"));  
				//				slicerQueryAxis.addSet(cthreshholdSet);  
				
				return query;        
			}
			
			// Handle a query fault. 
			private function showFault(error:ErrorMessage, token:Object):void { 
				Alert.show(error.faultString); 
			} 
			
			// Handle a successful query by passing the query results to  
			// the OLAPDataGrid control.. 
			private var cubeResult:OLAPResult;
			private function showResult(result:Object, token:Object):void { 
				if (!result) { 
					Alert.show("No results from query."); 
					return; 
				} 
				
				cubeResult = result as OLAPResult;
				
				/////////////////////
				// 额外工作：获取三维数据
				var dataXML:XML= 	<ds/>;
				var rowLength:Number = cubeResult.getAxis(OLAPQuery.ROW_AXIS).positions.length;
				
				var newChartData:Array = [];
				
				for(var iRow:int=0;iRow<rowLength;iRow++)
				{
					var rowAxis:IOLAPQueryAxis = cubeResult.query.getAxis(OLAPQuery.ROW_AXIS);
					var rowTuple:OLAPTuple = rowAxis.tuples[iRow];
					var rowKey:String = rowTuple.explicitMembers.toArray().join(",");
					
					if (rowKey.indexOf("(All)") > -1) 
					{
						rowKey="All";						
					}else
					{
						rowKey = rowKey.split(".").reverse().join();
						rowKey = rowKey.substr(1,rowKey.indexOf("]",0) -1);
					}
					
					
					var colAxis:IOLAPQueryAxis = cubeResult.query.getAxis(OLAPQuery.COLUMN_AXIS);
					var columnLength:Number = cubeResult.getAxis(OLAPQuery.COLUMN_AXIS).positions.length;
					
					for (var i:int=0;i<columnLength;i++) {
						var tuple:OLAPTuple = colAxis.tuples[i];
						var key:String = tuple.explicitMembers.toArray().join(",");
						if (key.indexOf("(All)") > -1) 
							continue;            
						
						key = key.split(".").reverse().join();
						key = key.substr(1,key.indexOf("]",0) -1);
						
						var measureValue:Number = cubeResult.getCell(iRow, i).value;
						
						newChartData.push({row:rowKey, key:key, value:measureValue});
						var xmlRow:XML = <r/>
						
						xmlRow.@row = rowKey;
						xmlRow.@col = key;
						xmlRow.@value = measureValue;
						
						dataXML.appendChild(xmlRow);
						
					}					
				}
				
				// 使用DataGrid显示从OLAPDataGrid中抽取的数据
				
				var xmlLC:XMLListCollection = new XMLListCollection(dataXML.r.(@row=="All"));
				var nameSort:Sort = new Sort();
				
				switch(queryType){
					case "XIAN":
						nameSort.fields = [new SortField('@value', true,true,true)];
						xmlLC.sort = nameSort;
						xmlLC.refresh();
						
						xianColumnChart.dataProvider = xmlLC;
						
						this.runQuery("PERIOD")
						
						break;
					case "PERIOD":
						nameSort.fields = [new SortField('@col', true,false,true)];
						xmlLC.sort = nameSort;
						xmlLC.refresh();
						
						periodLineChart.dataProvider = xmlLC;
						
						this.runQuery("PHASE")
						
						break;
					case "PHASE":
						nameSort.fields = [new SortField('@col', true,false,true)];
						xmlLC.sort = nameSort;
						xmlLC.refresh();
						
						phaseColumnChart.dataProvider = xmlLC;
						
						break;
				}
			}
			
			private function phaseLabelFunc(categoryValue:Object, previousCategoryValue:Object, axis:CategoryAxis, categoryItem:Object):String
			{
				if(categoryValue.toString() == '90')
					return "90(kA)";
				else
					return categoryValue.toString();
			}
			
			function xianDataTipFunc(hitData: HitData):String
			{
				return (hitData.chartItem as ColumnSeriesItem).item.@col+"发生" + (hitData.chartItem as ColumnSeriesItem).yValue +"次雷击";
			}			
			
		]]>
	</fx:Script>
	<s:Label id="markLabel" x="0" y="1" text="日期：" width="329" height="20"/>
	
	<mx:TabNavigator creationPolicy="all" cornerRadius="0" horizontalAlign="right" depth="1" height="100%" width="100%" x="0" y="0">
		<s:NavigatorContent label="按行政区显示" width="100%" height="100%">
			<mx:Canvas width="100%" height="100%">
				<mx:ColumnChart id="xianColumnChart" width="100%" height="100%" showDataTips="true"  fontFamily="中易宋体" fontSize="15" dataTipFunction="xianDataTipFunc">
					<mx:horizontalAxis>
						<mx:CategoryAxis dataProvider='{ ["海淀区","石景山","丰台区","朝阳区","宣武区","东城区","西城区","崇文区","密云县","顺义区","门头沟区","怀柔区","昌平区","房山区","通州区","平谷区","延庆县","大兴区"]}'/>
					</mx:horizontalAxis>
					
					<mx:series>
						<mx:ColumnSeries displayName="" xField="@col" yField="@value">
							<mx:stroke>
								<mx:Stroke color="black" weight="1" alpha="1.0" />
							</mx:stroke>							
							<mx:fills>
								<mx:LinearGradient>
									<mx:entries>
										<fx:Array>
											<mx:GradientEntry color="#31AEFC" ratio="0.0" alpha="1.0" />
											<mx:GradientEntry color="#2E7AA9" ratio="1.0" alpha="1.0" />
										</fx:Array>
									</mx:entries>
								</mx:LinearGradient>
								<mx:LinearGradient>
									<mx:entries>
										<fx:Array>
											<mx:GradientEntry color="#2E7AA9" ratio="0.0" alpha="1.0" />
											<mx:GradientEntry color="#00FF80" ratio="1.0" alpha="1.0" />
										</fx:Array>
									</mx:entries>
								</mx:LinearGradient>
								<mx:LinearGradient>
									<mx:entries>
										<fx:Array>
											<mx:GradientEntry color="#C25532" ratio="0.0" alpha="1.0" />
											<mx:GradientEntry color="#EF754E" ratio="1.0" alpha="1.0" />
										</fx:Array>
									</mx:entries>
								</mx:LinearGradient>
								<mx:LinearGradient>
									<mx:entries>
										<fx:Array>
											<mx:GradientEntry color="#35AD35" ratio="0.0" alpha="1.0" />
											<mx:GradientEntry color="#3CD33C" ratio="1.0" alpha="1.0" />
										</fx:Array>
									</mx:entries>
								</mx:LinearGradient>
								<mx:LinearGradient>
									<mx:entries>
										<fx:Array>
											<mx:GradientEntry color="#E6CFE6" ratio="0.0" alpha="1.0" />
											<mx:GradientEntry color="#800080" ratio="1.0" alpha="1.0" />
										</fx:Array>
									</mx:entries>
								</mx:LinearGradient>
								<mx:LinearGradient>
									<mx:entries>
										<fx:Array>
											<mx:GradientEntry color="#90EE90" ratio="0.0" alpha="1.0" />
											<mx:GradientEntry color="#32CD32" ratio="1.0" alpha="1.0" />
										</fx:Array>
									</mx:entries>
								</mx:LinearGradient>
								<mx:LinearGradient>
									<mx:entries>
										<fx:Array>
											<mx:GradientEntry color="#FFFDD0" ratio="0.0" alpha="1.0" />
											<mx:GradientEntry color="#FFD700" ratio="1.0" alpha="1.0" />
										</fx:Array>
									</mx:entries>
								</mx:LinearGradient>
								<mx:LinearGradient>
									<mx:entries>
										<fx:Array>
											<mx:GradientEntry color="#E69966" ratio="0.0" alpha="1.0" />
											<mx:GradientEntry color="#FF4D00" ratio="1.0" alpha="1.0" />
										</fx:Array>
									</mx:entries>
								</mx:LinearGradient>
								<mx:LinearGradient>
									<mx:entries>
										<fx:Array>
											<mx:GradientEntry color="#FFFAFA" ratio="0.0" alpha="1.0" />
											<mx:GradientEntry color="#E60000" ratio="1.0" alpha="1.0" />
										</fx:Array>
									</mx:entries>
								</mx:LinearGradient>
								<mx:LinearGradient>
									<mx:entries>
										<fx:Array>
											<mx:GradientEntry color="#FF0000" ratio="0.0" alpha="1.0" />
											<mx:GradientEntry color="#E60000" ratio="1.0" alpha="1.0" />
										</fx:Array>
									</mx:entries>
								</mx:LinearGradient>
								<mx:LinearGradient>
									<mx:entries>
										<fx:Array>
											<mx:GradientEntry color="#FFFccc" ratio="0.0" alpha="1.0" />
											<mx:GradientEntry color="#E60ccc" ratio="1.0" alpha="1.0" />
										</fx:Array>
									</mx:entries>
								</mx:LinearGradient>								
								<mx:SolidColor color="0xFE0002"/>
								<mx:SolidColor color="0xEED0FF"/>
								<mx:SolidColor color="0xF5AAA6"/>
								<mx:SolidColor color="0xF9D425"/>
								<mx:SolidColor color="0x0000F9"/>
							</mx:fills>
						</mx:ColumnSeries>
					</mx:series>
					<mx:seriesFilters>  
						<fx:Array/>  
					</mx:seriesFilters>  					
				</mx:ColumnChart>
				
			</mx:Canvas>
		</s:NavigatorContent>
		<s:NavigatorContent label="按时间显示" width="100%" height="100%">
			<mx:LineChart id="periodLineChart" width="100%" height="100%" backgroundElements="{chartGridLines}" showDataTips="true">
				<mx:horizontalAxis>
					<mx:LinearAxis minimum="0" maximum="23" interval="1" />
				</mx:horizontalAxis>
				<mx:series>
					<mx:LineSeries displayName="" form="curve" xField="@col" yField="@value" />
				</mx:series>
			</mx:LineChart>
		</s:NavigatorContent>
		<s:NavigatorContent label="按强度显示" width="100%" height="100%">
			<mx:ColumnChart id="phaseColumnChart" width="100%" height="100%" showDataTips="true" fontFamily="中易宋体" fontSize="15">
				<mx:horizontalAxis>
					<mx:CategoryAxis dataProvider="{[0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90]}" labelFunction="phaseLabelFunc" />
				</mx:horizontalAxis>
				
				<mx:series>
					<mx:ColumnSeries displayName="数量" xField="@col" yField="@value">
						<mx:fills>
							<mx:SolidColor color="0xFE00FE"/>
							<mx:SolidColor color="0x000000"/>
							<mx:SolidColor color="0x9999CC"/>
							<mx:SolidColor color="0xF9D425"/>
							<mx:SolidColor color="0x0402E0"/>
						</mx:fills>
					</mx:ColumnSeries>
				</mx:series>
			</mx:ColumnChart>
			
		</s:NavigatorContent>
		<s:NavigatorContent label="数据分析" width="100%" height="100%">
			<mx:DataGrid id="dataGrid" dataProvider="{getThunderForChartAllResult.lastResult}" height="100%" left="10" right="10">
				<mx:columns>
					<mx:DataGridColumn headerText="序号" dataField="idx"/>
					<mx:DataGridColumn headerText="时间" dataField="ftime"/>
					<mx:DataGridColumn headerText="时辰" dataField="period"/>
					<mx:DataGridColumn headerText="区县" dataField="xian"/>
					<mx:DataGridColumn headerText="强度" dataField="phase"/>
					<mx:DataGridColumn headerText="JD" dataField="longitude"/>
					<mx:DataGridColumn headerText="WD" dataField="latitude"/>
				</mx:columns>
			</mx:DataGrid>
		</s:NavigatorContent>
		
	</mx:TabNavigator>
</s:Group>
