<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright Â© 2008 ESRI
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/FlexViewer/License.txt
//
////////////////////////////////////////////////////////////////////////////////
-->
<BaseWidget	xmlns				="com.esri.solutions.flexviewer.*" 
			xmlns:mx			="http://www.adobe.com/2006/mxml" 
			xmlns:toccomp		="com.esri.solutions.flexviewer.components.toc.*" 
			xmlns:widgets		="com.esri.solutions.flexviewer.widgets.*"
			x					="600" 
			y					="300" 
			widgetConfigLoaded	="init()">
	
	
	<mx:Script>
		<![CDATA[
		
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.Layer;
			import com.esri.ags.Map;
			import com.esri.solutions.flexviewer.ConfigData;
			import com.esri.solutions.flexviewer.utils.WidgetEffects;
			import mx.controls.Alert;
			import mx.collections.*;
			
			//labels
			[Bindable]
			private var visibilityLabel:String;
			
			[Bindable]
			private var transparencyLabel:String;
			
			private const ICON_URL:String = "com/esri/solutions/flexviewer/assets/images/icons/";
						
			private function init():void
			{
				if (configXML)
				{
					//labels
					visibilityLabel = configXML.labels.visibilitylabel || "Layer Visibility";
					transparencyLabel = configXML.labels.transparencylabel || "Layer Transparency";
				}
				toc.map = map;
				toc.excludeLayers = getBasemaps();
				toc.excludeGraphicsLayers = true;
				layerRepeater.dataProvider = getLayers();
				wTemplate.addTitlebarButton(ICON_URL + "i_options.png", transparencyLabel, showStateOptions);
				wTemplate.addTitlebarButton(ICON_URL + "i_folder.png", visibilityLabel, showStateVisibility);
			}			
			
			private function getBasemaps():ArrayCollection
			{
				var baseMaps:ArrayCollection = new ArrayCollection();
				for (var i:Number = 0; i < configData.configBasemaps.length; i++)
		        {
		        	baseMaps.addItem(configData.configBasemaps[i].label);
		        }
				return baseMaps;
			}			
			
			private function getLayers():Array
			{
				var basemapCount:Number = configData.configBasemaps.length;
				var layerArray:Array = [];
				for (var i:Number = map.layerIds.length -1; i >= basemapCount; i--)
				{
					var layer:Layer = map.getLayer(map.layerIds[i]);
					if (!(layer is GraphicsLayer))
						layerArray.push(layer);
				}
				return layerArray;
			}
						
			private function showStateVisibility(event:MouseEvent):void
			{
				WidgetEffects.flipWidget(this, viewStack, "selectedIndex", 0, 400);
			}			
			
			private function showStateOptions(event:MouseEvent):void
			{
				WidgetEffects.flipWidget(this, viewStack, "selectedIndex", 1, 400);
			}
						
		]]>
	</mx:Script>
	
	<WidgetTemplate id="wTemplate">
		<mx:ViewStack id="viewStack" width="100%" height="100%" creationPolicy="all">
			<mx:VBox width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
				<mx:Label text="{visibilityLabel}" styleName="WidgetText" width="100%"/>
				<toccomp:TOC id="toc" width="100%" height="100%"/>
			</mx:VBox>
			<mx:VBox width="100%" height="100%">
				<mx:Label text="{transparencyLabel}" styleName="WidgetText" width="100%"/>
				<mx:Repeater id="layerRepeater">
						<widgets:LayerAlpha layer="{layerRepeater.currentItem}"/>
				</mx:Repeater>
			</mx:VBox>
		</mx:ViewStack>
	</WidgetTemplate>
	
</BaseWidget>
