<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright Â© 2008 ESRI
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/FlexViewer/License.txt
//
////////////////////////////////////////////////////////////////////////////////
-->
<BaseWidget xmlns:esri			="http://www.esri.com/2008/ags" 
			xmlns				="com.esri.solutions.flexviewer.*" 
			xmlns:mx			="http://www.adobe.com/2006/mxml" 
			xmlns:mxeffects		="com.adobe.ac.mxeffects.*"
			xmlns:widgets		="com.esri.solutions.flexviewer.widgets.*"
			x					="600" 
			y					="300"  
			widgetConfigLoaded	="init()">
	
	
	<mx:Script>
		<![CDATA[
			
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.Graphic;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.Layer;
			import com.esri.ags.Map;
			import com.esri.ags.symbol.PictureMarkerSymbol;
			import com.esri.ags.symbol.SimpleFillSymbol;
			import com.esri.ags.symbol.SimpleLineSymbol;
			import com.esri.ags.tasks.FeatureSet;
			import com.esri.ags.tasks.Query;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.toolbars.Draw;
			import com.esri.solutions.flexviewer.SiteContainer;
			import com.esri.solutions.flexviewer.utils.WidgetEffects;
			import mx.collections.*;
			import mx.controls.Alert;
			import mx.rpc.AsyncResponder; 
			import mx.rpc.events.ResultEvent;
						
			//labels
			private var graphicalsearchLabel:String;
			
			private var textsearchLabel:String;
			
			private var resultsLabel:String;
			
			[Bindable]
			private var layerLabel:String;
			
			private var nolayerLabel:String;
			
			[Bindable]	
			private var submitLabel:String;	
			
			[Bindable]
			private var pointLabel:String;
			
			[Bindable]
			private var lineLabel:String;
			
			[Bindable]
			private var rectangleLabel:String;
			
			[Bindable]
			private var polygonLabel:String;
			
			[Bindable]
			private var clearLabel:String;	
			
			private var loadingLabel:String;	
			
			private var selectionLabel:String;
			
			[Bindable]
			private var msgVisible:Boolean = false;
			
			private var zoomScale:Number = 5000;
			
			private var configSearchGraphical:Array;
			
			private var configSearchText:Array;
			
			private var queryLayer:String;
			
			private var queryGeom:Geometry;
			
			private var queryExpr:String;
			
			private var queryFields:String;
			
			private var queryTitleField:String;
			
			private var queryLinkField:String;
			
			private var graphicsLayer:GraphicsLayer;
			
			private var graphicPointSym:PictureMarkerSymbol;
			
			private var graphicLineSym:SimpleLineSymbol = new SimpleLineSymbol("solid", 0xFF0000, 0.8, 2);
			
			private var graphicPolySym:SimpleFillSymbol = new SimpleFillSymbol("solid", 0xFF0000, 0.5, graphicLineSym);
			
			private var timer:Timer;
			
			private const ICON_URL:String = "com/esri/solutions/flexviewer/assets/images/icons/";
						
			private function init():void
			{
				graphicPointSym = new PictureMarkerSymbol(widgetIcon, 30, 30)
				graphicsLayer = new GraphicsLayer();
				graphicsLayer.symbol = graphicPointSym;
				map.addLayer(graphicsLayer);
				if (configXML)
				{
					//labels
					graphicalsearchLabel = configXML.labels.graphicalsearchlabel || "Graphical Search";
					textsearchLabel = configXML.labels.textsearchlabel || "Text Search";
					resultsLabel = configXML.labels.resultslabel || "Results";
					layerLabel = configXML.labels.layerlabel || "Search Layer:";
					nolayerLabel = configXML.labels.nolayerlabel || "No search layer defined.";
					submitLabel = configXML.labels.submitlabel || "Search";
					pointLabel = configXML.labels.pointlabel || "Select by Point";
					lineLabel = configXML.labels.linelabel || "Select by Line";
					rectangleLabel = configXML.labels.rectanglelabel || "Select by Rectangle";
					polygonLabel = configXML.labels.polygonlabel || "Select by Polygon";
					clearLabel = configXML.labels.clearlabel || "Clear";
					loadingLabel = configXML.labels.loadinglabel || "Loading...";
					selectionLabel = configXML.labels.selectionlabel || "Features Selected:";
					
					configSearchGraphical = [];
					configSearchText = [];
					var lyrList:XMLList = configXML..layer;
					for (var i:Number = 0; i < lyrList.length(); i++)
					{
						var lyrURL:String = lyrList[i].url;
						var lyrLabel:String = lyrList[i].name;
						var lyrTextLabel:String = lyrList[i].textsearchlabel;
						var lyrGraphicalLabel:String = lyrList[i].graphicalsearchlabel;
						var lyrExpr:String = lyrList[i].expression;
						var lyrFields:String = lyrList[i].fields;
						var lyrTitleField:String = lyrList[i].titlefield;
						var lyrLinkField:String = lyrList[i].linkfield;
						var searchLayer:Object = 
						{
							url: lyrURL,
							label: lyrLabel,
							textlabel: lyrTextLabel,
							graphicallabel: lyrGraphicalLabel,
							expr: lyrExpr,
							fields: lyrFields,
							titlefield: lyrTitleField,
							linkfield: lyrLinkField
						}
						configSearchGraphical.push(searchLayer);
						if (lyrExpr)
							configSearchText.push(searchLayer);
					}
					
					if (Number(configXML.zoomscale) > 0)
						zoomScale = Number(configXML.zoomscale);					
				}
				
				wTemplate.addTitlebarButton(ICON_URL + "i_table.png", resultsLabel, showStateResults);
				if (configSearchText.length)
					wTemplate.addTitlebarButton(ICON_URL + "i_searchtext.png", textsearchLabel, showStateTextSearch);
				wTemplate.addTitlebarButton(ICON_URL + "i_searchgraphical.png", graphicalsearchLabel, showStateGraphicalSearch);
				
				//Setup Text Search
				if (configSearchText.length)
				{
					cboLayerText.dataProvider = configSearchText;
					txtLabelText.text = configSearchText[0].textlabel;
					if (configSearchText.length == 1)
					{
						boxText.visible = false;
						boxText.includeInLayout = false;
					}
				}
				else
				{
					boxText.visible = false;
					txtLabelText.text = nolayerLabel;
				}
				
				//Setup Graphical Search
				if (configSearchGraphical.length)
				{
					cboLayerGraphical.dataProvider = configSearchGraphical;
					txtLabelGraphical.text = configSearchGraphical[0].graphicallabel;
					if (configSearchGraphical.length == 1)
					{
						boxGraphical.visible = false;
						boxGraphical.includeInLayout = false;
					}
				}
				else
				{
					boxGraphical.visible = false;
					txtLabelGraphical.text = nolayerLabel;
				}	
			}			
			
			private function searchLayerChangedText():void
			{
				var i:Number = cboLayerText.selectedIndex;
				txtLabelText.text = configSearchText[i].textlabel;
			}
			
			private function searchLayerChangedGraphical():void
			{
				var i:Number = cboLayerGraphical.selectedIndex;
				txtLabelGraphical.text = configSearchGraphical[i].graphicallabel;
			}
						
			private function activateSearchTool(value:String):void
			{
				var status:String;
				switch (value)
				{
					case Draw.MAPPOINT:
					{
						status = pointLabel;
						break;
					}
					
					case Draw.POLYLINE:
					{
						status = lineLabel;
						break;
					}
						
					case Draw.EXTENT:
					{
						status = rectangleLabel;
						break;
					}
					
					case Draw.POLYGON:
					{
						status = polygonLabel;
						break;
					}
				}
				setMapAction(value, status, searchDrawEnd);;		
			}			
			
			private function searchDrawEnd(event:DrawEvent):void
			{
				var geom:Geometry = event.graphic.geometry;
				queryFeaturesGraphical(geom);
			}			
			
			//query features text
			private function queryFeaturesText():void
			{
				var i:Number = cboLayerText.selectedIndex;
				queryLayer = configSearchText[i].url;
				queryExpr = configSearchText[i].expr;
				queryFields = configSearchText[i].fields;
				queryTitleField = configSearchText[i].titlefield;
				queryLinkField = configSearchText[i].linkfield;
			
				if ((queryLayer) && (txtSearch.text))
				{
					var queryTask:QueryTask = new QueryTask(queryLayer);
					var query:Query = new Query();
					var expr:String = queryExpr.replace("[value]", txtSearch.text);
					query.where = expr;
					query.outFields = queryFields.split(",");
					query.returnGeometry = true;
					query.outSpatialReference = map.spatialReference;
					queryTask.execute(query, new AsyncResponder(onResult, onFault));  
					showMessage(loadingLabel, true); 
					showStateResults(null);   
		              
		          	// on result
					function onResult(featureSet:FeatureSet, token:Object = null):void                
					{   
						try
						{
							var recAC:ArrayCollection = createRecordData(featureSet);
							addSharedData(widgetTitle, recAC);
							wRepeater.dataProvider = recAC;
							showMessage(selectionLabel + " " + featureSet.features.length, false); 
						}
						catch (error:Error)
						{
							showMessage(error.message, false);
						}	
				  	}
						
					//on fault
					function onFault(info:Object, token:Object = null) : void
					{                    
						showMessage(info.toString(), false);         
					}
				}  
			}				
						
			//query features graphical
			private function queryFeaturesGraphical(geom:Geometry):void
			{
				var i:Number = cboLayerGraphical.selectedIndex;
				var querySpatialRel:String = "esriSpatialRelIntersects";
				queryLayer = configSearchGraphical[i].url;
				queryGeom = geom;
				queryFields = configSearchGraphical[i].fields;
				queryTitleField = configSearchGraphical[i].titlefield;
				queryLinkField = configSearchGraphical[i].linkfield;
			
				if (queryLayer)
				{
					var queryTask:QueryTask = new QueryTask(queryLayer);
					var query:Query = new Query();
					query.geometry = queryGeom;
					query.outFields = queryFields.split(",");
					query.returnGeometry = true;
					query.spatialRelationship = querySpatialRel;
					query.outSpatialReference = map.spatialReference;
					queryTask.execute(query, new AsyncResponder(onResult, onFault));  
					showMessage(loadingLabel, true); 
					showStateResults(null);   
		              
		          	// on result
					function onResult(featureSet:FeatureSet, token:Object = null):void                
					{   
						try
						{
							var recAC:ArrayCollection = createRecordData(featureSet);
							addSharedData(widgetTitle, recAC);
							wRepeater.dataProvider = recAC;
							showMessage(selectionLabel + " " + featureSet.features.length, false); 
						}
						catch (error:Error)
						{
							showMessage(error.message, false);
						}	
				  	}
						
					//on fault
					function onFault(info:Object, token:Object = null) : void
					{                    
						showMessage(info.toString(), false);         
					}
				}  
			}			
			
			//create record data
			private function createRecordData(featureSet:FeatureSet):ArrayCollection
			{
				graphicsLayer.clear();
				var recAC:ArrayCollection = new ArrayCollection();
				if (!queryTitleField)
						queryTitleField = featureSet.displayFieldName;
				var icon:String = widgetIcon;
										
				for each (var gra:Graphic in featureSet.features)                    
				{   
					var obj:Object = gra.attributes;
					var fld:String;
					var value:String;
					var title:String;
					var content:String = "";
					var link:String = "";
					var point:MapPoint = getGeomCenter(gra);
			
    		        for (fld in obj)
    		        {
    		        	value = obj[fld].toString();
    		        	
    		        	if (fld.toUpperCase() == queryTitleField.toUpperCase())
    		        	{
					   		title = value;
						   	if (!title)
								title = widgetTitle;
    		        	}
						else if (fld.toUpperCase() == queryLinkField.toUpperCase())
						{
							link = value;
						}
						else
						{
							if (fld.toUpperCase() != queryTitleField.toUpperCase())
								content += fld + ": " + value + "\n";
						}
		        	}

					var infoData:Object = 
					{
						icon: icon, 
						title: title, 
						content: content, 
						link: link, 
						point: point,
						geometry: gra.geometry
					};                 
					recAC.addItem(infoData);
					//***
					gra.addEventListener(MouseEvent.ROLL_OVER, mouseOverGraphic)
					gra.attributes = infoData;
					switch (gra.geometry.type)
	           		{
	               		case Geometry.POLYLINE:
	               		{
	               			gra.symbol = graphicLineSym;
	               			break;
	               		}
	               		
	               		case Geometry.POLYGON:
	               		{
	               			gra.symbol = graphicPolySym;
	               			break;
	               		}
	             	}
	             	graphicsLayer.add(gra);
	             	//***
	              	             
			    } 
			    return recAC;
			}		
		
			//get geom center
			private function getGeomCenter(gra:Graphic):MapPoint
			{
				var pt:MapPoint;
	           	switch (gra.geometry.type)
	           	{
	               case Geometry.MAPPOINT:
	               {
	                    pt = gra.geometry as MapPoint;
	                    break;
	               }
	               
	               case Geometry.POLYLINE:
	               {
	               		var pl:Polyline = gra.geometry as Polyline;
	               		var pathCount:Number = pl.paths.length;
	               		var pathIndex:int = int((pathCount / 2) - 1);
	               		var midPath:Array = pl.paths[pathIndex];
	               		var ptCount:Number = midPath.length;
	               		var ptIndex:int = int((ptCount / 2) - 1);
	               		pt = pl.getPoint(pathIndex, ptIndex);
	               		break;
	               }
	               
	               case Geometry.POLYGON:
	               {
	                    var poly:Polygon = gra.geometry as Polygon;
	               		pt = poly.extent.center;
	                    break;
	               }
	            }
				return pt;
			}			
						
			//mouse over graphic
			private function mouseOverGraphic(event:MouseEvent):void
			{
				var gra:Graphic = event.currentTarget as Graphic;
				var infoData:Object = gra.attributes;
				this.showInfoWindow(infoData);
			}			
			
			private function clear():void
			{
				graphicsLayer.clear();
				clearMessage();
				txtSearch.text = "";
				wRepeater.dataProvider = null;
				this.showInfoWindow(null);
			}			
			
			private var hitimer:uint;
								
			private function mouseOverRecord(event:MouseEvent):void
			{
				var infoData:Object = event.currentTarget.infoData;
				clearTimeout(hitimer);
				hitimer = setTimeout(showHighlight, 800, [infoData]);
			}			
			
			private function mouseOutRecord():void
			{
				clearTimeout(hitimer);
				this.showInfoWindow(null);
			}			
			
			private function clickRecord(event:MouseEvent):void
			{
				var infoData:Object = event.currentTarget.infoData;
				var pt:MapPoint = infoData.point;
				if (map.scale > zoomScale)
					map.scale = zoomScale;
				map.centerAt(pt);
			}			
			
			private function showHighlight(params:Array):void
			{
				var infoData:Object = params[0];
				var pt:MapPoint = infoData.point;
				//if (!map.extent.contains(pt))
				//	map.centerAt(pt);
				this.showInfoWindow(params[0]);
			}			
			
			private function showMessage(msg:String, swfVisible:Boolean):void
			{
				txtMessage.text = msg;
				swfMessage.visible = swfVisible;
				msgVisible = true;
			}			
			
			private function clearMessage():void
			{
				msgVisible = false;
			}
								
			private function widgetClosedHandler(event:Event):void
			{
				graphicsLayer.visible = false;
				this.showInfoWindow(null);
				setMapNavigation(null, null);
			}
						
			private function widgetOpenedHandler(event:Event):void
			{
				graphicsLayer.visible = true;
			}
						
			private function showStateGraphicalSearch(event:MouseEvent):void
			{
				WidgetEffects.flipWidget(this, viewStack, "selectedIndex", 0, 400);
			}
			
			private function showStateTextSearch(event:MouseEvent):void
			{
				WidgetEffects.flipWidget(this, viewStack, "selectedIndex", 1, 400);
			}				
						
			private function showStateResults(event:MouseEvent):void
			{
				WidgetEffects.flipWidget(this, viewStack, "selectedIndex", 2, 400);
			}
			
		]]>
	</mx:Script>
	
	
	<WidgetTemplate id="wTemplate" widgetClosed="widgetClosedHandler(event)" widgetOpened="widgetOpenedHandler(event)">
		<mx:ViewStack id="viewStack" width="100%" height="100%" creationPolicy="all" paddingTop="4">
			<mx:VBox width="100%" height="100%" verticalGap="4" horizontalAlign="center">
				<mx:HBox id="boxGraphical" horizontalAlign="center" width="100%" horizontalGap="15">
					<mx:Label id="lblLayerGraphical" text="{layerLabel}" styleName="WidgetText" />
					<mx:ComboBox id="cboLayerGraphical" change="searchLayerChangedGraphical()"/>
				</mx:HBox>
				<mx:Text id="txtLabelGraphical" text="" styleName="WidgetText" width="100%" textAlign="center"/>
				<mx:HBox horizontalAlign="center" width="100%" horizontalGap="15">
					<mx:Image click="{activateSearchTool(Draw.MAPPOINT)}" source="com/esri/solutions/flexviewer/assets/images/icons/i_draw_point.png" useHandCursor="true" buttonMode="true" toolTip="{pointLabel}" width="40" height="40"/>
					<mx:Image click="{activateSearchTool(Draw.POLYLINE)}" source="com/esri/solutions/flexviewer/assets/images/icons/i_draw_line.png" useHandCursor="true" buttonMode="true" toolTip="{lineLabel}" width="40" height="40"/>
					<mx:Image click="{activateSearchTool(Draw.EXTENT)}" source="com/esri/solutions/flexviewer/assets/images/icons/i_draw_rect.png" useHandCursor="true" buttonMode="true" toolTip="{rectangleLabel}" width="40" height="40"/>
					<mx:Image click="{activateSearchTool(Draw.POLYGON)}" source="com/esri/solutions/flexviewer/assets/images/icons/i_draw_poly.png" useHandCursor="true" buttonMode="true" toolTip="{polygonLabel}" width="40" height="40"/>
					<mx:Image click="clear()" source="com/esri/solutions/flexviewer/assets/images/icons/i_clear.png" useHandCursor="true" buttonMode="true" toolTip="{clearLabel}" width="40" height="40"/>
				</mx:HBox>
			</mx:VBox>
			<mx:VBox width="100%" height="100%" verticalGap="4" horizontalAlign="center">
				<mx:HBox id="boxText" horizontalAlign="center" width="100%" horizontalGap="15">
					<mx:Label id="lblLayerText" text="{layerLabel}" styleName="WidgetText" />
					<mx:ComboBox id="cboLayerText" change="searchLayerChangedText()"/>
				</mx:HBox>
				<mx:Text id="txtLabelText" text="" styleName="WidgetText" width="100%" textAlign="center"/>
				<mx:TextInput id="txtSearch" width="90%" />
				<mx:HBox horizontalAlign="center" width="100%">
					<mx:Button label="{submitLabel}" click="queryFeaturesText()"/>
					<mx:Button label="{clearLabel}" click="clear()"/>
				</mx:HBox>
			</mx:VBox>
			<mx:VBox width="100%" height="100%" verticalGap="1">
				<mx:HBox id="boxMessage" visible="{msgVisible}" includeInLayout="{msgVisible}" width="100%">
					<mx:SWFLoader id="swfMessage" source="com/esri/solutions/flexviewer/assets/flash/loader.swf" visible="false" />
					<mx:Text id="txtMessage" text="" styleName="WidgetText" width="90%"/>
				</mx:HBox>
				<mx:Repeater id="wRepeater">
					<widgets:RecordData infoData="{wRepeater.currentItem}" mouseOver="mouseOverRecord(event)" mouseOut="mouseOutRecord()" click="clickRecord(event)"/>
				</mx:Repeater>
			</mx:VBox>
		</mx:ViewStack>
	</WidgetTemplate>
	
</BaseWidget>
