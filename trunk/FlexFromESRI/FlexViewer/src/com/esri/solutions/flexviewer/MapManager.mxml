<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright Â© 2008 ESRI
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/FlexViewer/License.txt
//
////////////////////////////////////////////////////////////////////////////////
-->
<mx:Canvas	xmlns:mx				="http://www.adobe.com/2006/mxml"
	       	xmlns:esri				="http://www.esri.com/2008/ags"  
	       	width					="100%" 
	       	height					="100%"  
	       	horizontalScrollPolicy	="off" 
	       	verticalScrollPolicy	="off"
	       	creationComplete		="init()">

	<mx:Script>
		<![CDATA[
			import mx.controls.Image;
		
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.ExtentEvent;
			import com.esri.ags.events.LayerEvent;
			import com.esri.ags.events.MapEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.ArcGISTiledMapServiceLayer;
			import com.esri.ags.layers.ArcGISDynamicMapServiceLayer;
			import com.esri.ags.layers.Layer;
			import com.esri.ags.Map;
			import com.esri.ags.toolbars.Navigation;
			import com.esri.ags.toolbars.Draw;
			import com.esri.solutions.flexviewer.AppEvent;
			import mx.controls.Alert;
							
			private var configData:ConfigData;
			
			private var map:Map;
			
			private var defaultstatus:String;
			
			private var infoPopup: InfoPopup;
			
			private var navToolbar:Navigation;
			
			private var drawToolbar:Draw;
			
			private var drawEndFunction:Function;
			
			private var fullExtent:Extent;
						
			//init
			private function init():void
			{
				SiteContainer.addEventListener(AppEvent.CONFIG_LOADED, config);
				SiteContainer.addEventListener(AppEvent.SET_MAP_NAVIGATION, changeNavigationbyMenu);
                SiteContainer.addEventListener(AppEvent.BASEMAP_MENU_CLICKED, basemapMenuClicked);
				SiteContainer.addEventListener(AppEvent.SET_MAP_NAVIGATION, changeNavigationbyWidget);
				SiteContainer.addEventListener(AppEvent.SET_MAP_ACTION, enableMapAction);
				SiteContainer.addEventListener(AppEvent.SHOW_INFOWINDOW, widgetShowInfo);
			}

			//config
		    private function config(event:AppEvent):void
		    {      
		    	configData = event.data as ConfigData;

		    	map = new Map();
		    	map.id = "map";
		    	map.zoomSliderVisible = false;
		    	map.addEventListener(MapEvent.LOAD, mapLoadComplete);
		    	this.addChild(map);
		        SiteContainer.dispatchEvent(new AppEvent(AppEvent.MAP_LOADED, false, false, map));
		        
		        var infoContainer:Canvas = new Canvas();
		        infoContainer.percentWidth = 100;
		        infoContainer.percentHeight = 100;
		        infoContainer.horizontalScrollPolicy = "off";
		        infoContainer.verticalScrollPolicy = "off";
		        this.addChild(infoContainer);
		        infoPopup = new InfoPopup();
		        infoPopup.map = map;
		        infoContainer.addChild(infoPopup);
		       
		        navToolbar = new Navigation();
		        navToolbar.map = map;
		        
		        drawToolbar = new Draw();
		        drawToolbar.map = map;
		        drawToolbar.addEventListener(DrawEvent.DRAW_END, onDrawEnd);
		        
		        getDefaultStatus();
		        
		        var i:int = 0;
		       
		        for (i = 0; i < configData.configExtents.length; i++)
		        {
		        	var id:String = configData.configExtents[i].id;
		        	var ext:String = configData.configExtents[i].extent;
		        	var extArray:Array = ext.split(" ");
		        	var extent:Extent = new Extent(Number(extArray[0]), Number(extArray[1]), Number(extArray[2]), Number(extArray[3]));
		        	if (id == "full")
		        	{
		        		fullExtent = extent;
		        	}
		        	if (id == "initial")
		        	{
		        		map.extent = extent;
		        	}
		        }
		     
				for (i = 0; i < configData.configMap.length; i++)
		        {
		        	var label:String  = configData.configMap[i].label;
		        	var type:String = configData.configMap[i].type;
		        	var url:String =  configData.configMap[i].url;
		        	var visible:Boolean = configData.configMap[i].visible;
		        	var alpha:Number = Number(configData.configMap[i].alpha);
		        	
			        switch (type.toLowerCase())
					{
						case "tiled":
						{
							var tiledlayer:ArcGISTiledMapServiceLayer = new ArcGISTiledMapServiceLayer(url);
							tiledlayer.id = label;
							tiledlayer.visible = visible;
							tiledlayer.alpha = alpha;
							map.addLayer(tiledlayer);
							break;
						}
							
						case "dynamic":
						{
							var dynlayer:ArcGISDynamicMapServiceLayer = new ArcGISDynamicMapServiceLayer(url);
							dynlayer.id = label;
							dynlayer.visible = visible; 
							dynlayer.alpha = alpha;
							map.addLayer(dynlayer);
							break;
						}
					}
					
		        }
				  
		        map.panArrowsVisible = false;
		    	map.zoomSliderVisible = true;
		    	map.logoVisible = false;
		    	
		    }
		    
		    //get default status
		    private function getDefaultStatus():void
		    {
		    	for (var i:Number = 0; i < configData.configMenus.length; i++)
		        {
		        	var menuItems:Array = configData.configMenus[i].items;
					for (var j:Number = 0; j < menuItems.length; j++)
					{
						var action:String = menuItems[j].action;
						var label:String = menuItems[j].label;
						var value:String = menuItems[j].value;
						if ((action == "navtool") && (value == Navigation.PAN))
						{
							defaultstatus = label;
							SiteContainer.dispatchEvent(new AppEvent(AppEvent.SET_STATUS, false, false, defaultstatus));
							break;
						}
					}
		        }
		    }
		    
	    	//map load complete
	    	private function mapLoadComplete(event:MapEvent):void
	    	{
	    		SiteContainer.dispatchEvent(new AppEvent(AppEvent.LAYER_LOADED, false, false, null));
	    	}
	    		    	    
	    	//nav tool clicked
	    	private function changeNavigationbyWidget(event:AppEvent):void
	    	{
	    		if (event.data)
	    		{
	    		     changeNavigation(event.data.tool, event.data.status);
	    		}
	    		else 
	    		{
	    			changeNavigation(null,null);
	    		}
	    	}


            private function changeNavigationbyMenu(event:AppEvent):void
            {
                if (event.data)
                {
                     changeNavigation(event.data.tool, event.data.status);
                }
                else 
                {
                    changeNavigation(null,null);
                }
            }
	    	
	    	
	    	private function changeNavigation(tool:String, status:String):void
	    	{
	    		switch (tool)
	    		{
	    			case Navigation.ZOOM_IN:
	    			{
	    				navToolbar.deactivate();
	    				drawToolbar.deactivate();
	    				navToolbar.activate(tool);
	    				SiteContainer.setStatus(status);
	    				break;
	    			}
	    			
	    			case Navigation.ZOOM_OUT:
	    			{
	    				navToolbar.deactivate();
	    				drawToolbar.deactivate();
	    				navToolbar.activate(tool);
	    				SiteContainer.setStatus( status);
	    				break;
	    			}
	    			
	    			case SiteContainer.NAVIGATION_ZOOM_FULL:
	    			{
	    				if (fullExtent)
	    				{
	    					map.extent = fullExtent;
	    				}
	    				else
	    				{
	    					navToolbar.zoomToFullExtent();
	    				}
	    				SiteContainer.setStatus( status);
	    				break;
	    			}
	    			
	    			case SiteContainer.NAVIGATION_ZOOM_PREVIOUS:
	    			{
	    				navToolbar.zoomToPrevExtent();
	    				SiteContainer.setStatus( status);
	    				break;
	    			}
	    			
	    			case SiteContainer.NAVIGATION_ZOOM_NEXT:
	    			{
	    				navToolbar.zoomToNextExtent();
	    				SiteContainer.setStatus( status);
	    				break;
	    			}
	    			
	    			case Navigation.PAN:
	    			{
	    				drawToolbar.deactivate();
	    				navToolbar.activate(tool);
	    				navToolbar.deactivate();
	    				SiteContainer.setStatus( status);
	    				break;
	    			}
	    			
	    			default:
	    			{
	    				drawToolbar.deactivate();
	    				navToolbar.activate(Navigation.PAN);
	    				navToolbar.deactivate();
	    				SiteContainer.setStatus( defaultstatus);
	    				break;
	    			}
	    		}
	    	}
	    	
	    	//draw tool clicked
	    	private function enableMapAction(event:AppEvent):void
	    	{
	    		var data:Object = event.data;
	    		var tool:String = data.tool;
	    		var status:String = data.status;
	    		drawEndFunction = data.handler;
	    		navToolbar.deactivate();
	    		drawToolbar.activate(tool);	
	    		map.zoomSliderVisible = true;    		
	    		SiteContainer.setStatus( status);		
	    	}
	    	
	    	private function onDrawEnd(event:DrawEvent):void
	    	{
	    		drawEndFunction(event);
	    	}
	    		    	
	    	//basemap menu clicked
	    	private function basemapMenuClicked(event:AppEvent):void
	    	{
	    		var id:String = event.data as String;
	    		var configBasemaps:Array = configData.configBasemaps;
	    		for (var i:Number = 0; i < configBasemaps.length; i++)
	    		{	
	    			var label:String  = configBasemaps[i].label;
	    			var lyr:Layer = map.getLayer(label);
		    		if (lyr != null)
		    		{
		    			if (configBasemaps[i].id == id)
	    				{
		    				lyr.visible = true;
		    			}
		    			else
		    			{
		    				lyr.visible = false;
		    			}
		    		}
	    		}
	    	}	    	
	    	    
		    private function widgetShowInfo(event:AppEvent):void
		    {
		    	infoPopup.infoData = event.data;
		    }		    
		    		    
		]]>
	</mx:Script>	
            


</mx:Canvas>
