<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html zhtongwen="simplified"><head>


  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta http-equiv="imagetoolbar" content="no">
  <link rel="icon" href="http://www.carto.net/srv/img/favicon.gif" type="image/gif">

<!--additional header info goes here-->
  <meta name="keywords" content="svg, navigation tools, zoom, pan, drag, zooming, panning">
  <meta name="description" content="Navigation Tools for SVG Maps">
  <style type="text/css">
body {background-image:url('http://www.carto.net/srv/img/backmap.gif'); background-repeat:no-repeat; background-color:#ffef95; font-family:Arial,Helvetica,Geneva,sans-serif;color:#B42D25; }

/*B42D25 ~ rgb(180,44,37) bordeauxrot*/
/*161682 ~ rgb(23,23,130) dklblau */
/*168C16 ~ rgb(23,140,23) dklgruen */
/*ffef95 ~ rgb(255,239,149) bg-gelb */

a {text-decoration:underline; color:#168C16; background: transparent}

h2 a {text-decoration:none;}

.inpage { color:#168C16;}
.expage { color:#161682;}

a:visited {text-decoration:none;}


/*
a.inpage:visited {color:#6C6F12; background: transparent}
a.expage:visited {color:#6C125D; background: transparent}
*/

@media screen {  /* hide from IE3 */
a[href]:hover { background: #ffa }
}




.lde {background-image:url('http://www.carto.net/srv/img/back_l_de.gif'); }
.lfr {background-image:url('http://www.carto.net/srv/img/back_l_fr.gif'); }
.len {background-image:url('http://www.carto.net/srv/img/back_l_en.gif'); }
.les {background-image:url('http://www.carto.net/srv/img/back_l_es.gif'); }

.higher { font-weight:bold; } /*TO BE REMOVED*/
.bigger { font-weight:bold; }
.smaller { font-size:small;}

.chrihelptd { background-color:#FFEF95; } /*tabellen hintergrund in christans hilfen sollet allgem hintergrund entsprechen*/

.newspostit { background-color:#f6ffd8;}


p,h1,h2,h3,h4,ul,ol,li,div,td,th,address,blockquote,b,i,.keepnormfontcolor { font-family:Arial,Helvetica,Geneva,sans-serif; color:#B42D25 }
tt,pre { font-family:"Courier New",Courier,monospace; color:#B42D25; }


.info { border:1px solid; background-color:#eeeeee; padding:40px; margin:0px; }
.info tt, .info pre { font-family:"Courier New",Courier,monospace; color:blue; }

  </style>
  <title>carto:net - 

  Navigation Tools for SVG Maps
</title>
</head><body><a name="top"></a>

<table width="100%">
	<tbody><tr>
		<td align="left">
			<img src="carto%20net%20-%20Navigation%20Tools%20for%20SVG%20Maps_files/navig.gif" alt="" usemap="#navig" border="0" height="111" width="600">
		</td>
	</tr>
</tbody></table>
<!-- ONLY navig.gif IMG NEEDED NORMALLY -->
<map name="navig">
  <area shape="rect" coords="226,14,585,66" href="http://www.carto.net/" target="_top" alt="main page - page initiale - hauptseite - página principal">
  <area shape="rect" coords="272,77,433,106" href="http://www.carto.net/projects/" alt="projects - projets - projekte - proyectos">
  <area shape="rect" coords="454,77,598,106" href="http://www.carto.net/authors/" alt="authors - auteurs - autoren - autores">
  <area shape="rect" coords="130,77,253,106" href="http://www.carto.net/papers/" alt="papers - exposés - berichte - papeles">
  <area shape="rect" coords="25,77,109,106" href="http://www.carto.net/help/" alt="help - aide - hilfe - ayuda">
</map>


<div id="adBarContainer" style="border: 0px solid red; margin-left: 13px; float: right; right: 8px; width: 160px; height: 600px;">
<script type="text/javascript"><!--
google_ad_client = "pub-6049981187637171";
	/* 160x600, Carto.net Standard */
	google_ad_slot = "4746507232";
	google_ad_width = 160;
	google_ad_height = 600;
//-->
</script>
<script type="text/javascript" src="carto%20net%20-%20Navigation%20Tools%20for%20SVG%20Maps_files/show_ads.js"></script><script src="carto%20net%20-%20Navigation%20Tools%20for%20SVG%20Maps_files/test_domain.js"></script><script>window.google_render_ad();</script><iframe name="google_ads_frame" src="carto%20net%20-%20Navigation%20Tools%20for%20SVG%20Maps_files/ads.htm" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" frameborder="0" height="600" scrolling="no" width="160"></iframe>
</div>






  <h2 class="sitemap"><a href="http://www.carto.net/">carto</a><span class="expage">:</span><a href="http://www.carto.net/papers/">papers</a><span class="expage">:</span><a href="http://www.carto.net/papers/svg/">svg</a><span class="expage">:</span><a href="http://www.carto.net/papers/svg/samples/">examples</a><span class="expage">:</span><a href="http://www.carto.net/papers/svg/samples/#iact">interactivity and svg gui</a><span class="expage">:</span>navigationTools</h2>

<h2>Navigation Tools for SVG Maps, Version 1.3.1 (2007-05-07)</h2>

<p>Example provided by Juliana Williams and Andreas Neumann (see history at the end of the page)</p>

<p>This SVG file structure and related ECMAScripts should assist
authors of "SVG only" webmapping applications in creating 2D map
navigation tools. For an introduction on why you should at the current
time consider writing SVG only webmapping applications, see the <a href="http://www.carto.net/papers/svg/gui/selectionlist/">selectionList tutorial</a>.</p>
<p>See an <a target="_blank" href="http://www.carto.net/papers/svg/navigationTools/index.svg">example</a>
of the SVG navigation tools. The scripts have been tested in Adobe SVG
viewer version 3, version 6, Mozilla SVG, Opera 9 and Batik. They have
been tested in multiple browsers and operating systems (Linux, MacOSX,
Windows).</p>
<p>The SVG File and ECMAScripts are free to use. If you do any
substantial improvements, please send back your improvements to the
author. The GUI elements of carto.net are licensed under the terms of
the LGPL license and you need to distribute the license with your code.
Additionally, you should create a link to carto.net in your project's
"about page" or impressum. If you plan to use the GUI elements in a
commercial product, please check back with the author of the GUI
elements to investigate arrangements. The original URL for the
navigation tools is http://www.carto.net/papers/svg/navigationTools/.</p>
      <div class="info">
        <h3>文档</h3>
       <h4>功能</h4>
       <ul>
       	<li>使用按钮以固定的缩放因子放大/缩小</li>
       	<li>用缩放标尺连续缩放</li>
       	<li>使用按钮返回全视图</li>
       	<li>使用按钮在主地图上重设地图中心</li>
      	<li>在主地图上通过拖拽矩形实现手动缩放</li>
       	<li>在主地图按下鼠标和拖拽实现地图漫游</li>
       	<li>链接的引用地图显示当前地图区域，也可重定位</li>
       	<li>坐标显示</li>
       	<li>显示地图区域：宽和高</li>
       	<li>zoom or pan modes for repeatedly using the same mode</li>
       	<li>新的地图区域可以用脚本设置 (map对象的方法)</li>
       	<li>地图浏览历史可以跟踪回放</li>
       	<li>光标有对用户操作的反馈，如：标明缩放或漫游模式 (说明: ASV3下无效)</li>
       	<li>一个十字可以高亮显示点位，包括主地图和鹰眼地图</li>
		<li>几个测试: 点是否在地图区域, 矩形是否在地图区域，矩形与地图区域的交迭</li>
       </ul>
       <h4>以来的外部文件和函数</h4>
        <ol><li><a href="http://www.carto.net/papers/svg/navigationTools/navigation.js">navigation.js</a>:
        	<ul><li>这个文件中的所有对象和函数都是必须的</li></ul>
        </li>
        <li><a href="http://www.carto.net/papers/svg/resources/mapApp.js">mapApp.js</a>:
        	<ul><li>这个文件中的所有对象和函数都是必须的</li></ul>
        </li>
        <li><a href="http://www.carto.net/papers/svg/resources/helper_functions.js">helper_functions.js</a>:
        	<ul>
        		<li>所有在文件头的全局变量</li>	
        		<li>函数 <tt>toPolarDir()</tt></li>
         		<li>函数 <tt>toPolarDist()</tt></li>
        		<li>函数 <tt>toRectX()</tt></li>
         		<li>函数 <tt>toRectY()</tt></li>
         		<li>函数 <tt>leftOfTest()</tt></li>
          		<li>函数 <tt>intersect2lines()</tt></li>
          		<li>函数 <tt>formatNumberString()</tt></li>
          		<li>函数 <tt>statusChange()</tt></li>
          		<li>函数 <tt>scaleObject()</tt></li>
          		<li>函数 <tt>getTransformToRootElement()</tt></li>
      	</ul>
        </li>
        <li><a href="http://www.carto.net/papers/svg/resources/timer.js">timer.js</a>:
        		<ul><li>这个文件中的所有对象和函数都是必须的</li></ul>
        </li>
        <li><a href="http://www.carto.net/papers/svg/gui/slider/slider.js">slider.js</a>:
        	<ul><li>这个文件中的所有对象和函数都是必须的</li></ul>
        </li>
        <li><a href="http://www.carto.net/papers/svg/gui/button/button.js">button.js</a>:
        		<ul><li>这个文件中的所有对象和函数都是必须的</li></ul>
        	</li>
        	<li><a href="http://www.carto.net/papers/svg/gui/checkbox_and_radiobutton/checkbox_and_radiobutton.js">checkbox_and_radiobutton.js</a>:
        	<ul><li>这个文件中的所有对象和函数都是必须的</li></ul>
        </li>
      </ol>
       <h4>其他需求</h4>
	<p>注意在这个环境中的任何地图数据都是y轴反转的。
that any map data that you use in this environment has to be y-axis
inverted. In typical GIS situations higher y(or up)-values are farer to
the north (top) whereas in SVG its the opposite. Changing your data is
relatively easy: use the original coordinate system and multiply each
up-value with minus 1. Our <a href="http://www.carto.net/papers/svg/utils/shp2svg/">Shapefile to SVG converter</a> does this inversion for you, so does <a href="http://postgis.refractions.net/">Postgis</a>. It is not recommended to flip the entire map using a transform attribute, since you would also flip text labels.</p>
        <h4>使用步骤</h4>
<h5>步骤一：拷贝初始文件结构</h5>
<p>拷贝上述所有.js文件到本地硬盘。另外，拷贝文件 <a href="http://www.carto.net/papers/svg/navigationTools/index.svg">index.svg</a>, <a href="http://www.carto.net/papers/svg/navigationTools/relief.jpg">relief.jpg</a> and <a href="http://www.carto.net/papers/svg/navigationTools/relief_small.jpg">relief_small.jpg</a>
(data source: Yosemite National Park website)到本地硬盘获得一个工作启动拷贝。你在添加自己的数据后会删除.jpg文件。然后，调整index.svg中引用外部js文件的相对路径。. 我们将使用index.svg作为开始来添加自己的数据。请不要删除任何有id属性的元素。否则脚本可能不能正常工作。大部分没有id属性的元素是可选的，可以删除。现在，打开index.svg文件，确保原型工作在初始设置。</p>

<h5>步骤二：调整坐标系统</h5>
<p>文件index.svg使用3个不同的坐标系统。最外层的坐标系统是基于设备的(屏幕像素)，应该调整以适合你的需要。它定义在svg root元素的<tt>viewBox</tt>属性中。(如果你viewBox坐标系统的概念，请看<a href="http://www.w3.org/TR/SVG11/coords.html#ViewBoxAttribute" target="_blank">SVG规格, 7.7</a>) 在同一个元素中我们定义了<tt>width</tt> 和<tt>height</tt> 为100%，并关闭缩放和漫游(<tt>zoomAndPan="disable"</tt>)，因为这些功能由我们自己的函数实现。如果你为一般的电脑桌面做设计，建议你略作调整基于屏幕的坐标系统。注意，如果你调整了屏幕坐标系统，你需要调整文件中符号的尺寸以反映坐标系统的变化。</p>
<p align="center">
<embed type="image/svg+xml" src="carto%20net%20-%20Navigation%20Tools%20for%20SVG%20Maps_files/figure1_coordinate_systems.svg" height="700" width="933"></p>
<p align="center">
图 1: 嵌入式坐标系统原理
</p>
<p>第二个坐标系统是主地图窗口的坐标系统。我们在一个嵌入的<tt>&lt;svg /&gt;</tt>元素中定义。这个坐标系统用真实世界的单位定义，如米或度。在例子中我们用米定义坐标系统，反映UTM 11区坐标。注意在我们的viewBox坐标系统中Y轴是反转的，因为地图的坐标系统总是与SVG坐标系统相反。针对你自己的地图, 寻找以 <tt>&lt;svg id="mainMap" ...</tt>起始的行并调整<tt>viewBox</tt>, <tt>width</tt>, <tt>height</tt>, <tt>x</tt> and <tt>y</tt>
属性以在屏幕坐标系统中反映你的坐标系统和地图摆放。请注意为保证脚本工作正常，我们假设<tt>mainMap</tt>外部宽高比和真实世界坐标系的viewBox的宽高比相同，</p>
      	<p>第三个坐标系统是从内部讲与主地图的坐标系统相同，即是说概览地图<tt>viewBox</tt> 属性应与主地图一致。查找以<tt>&lt;svg id="referenceMap" ...</tt> 起始的行并调整x, y, width, height and viewBox属性以匹配你的布局和地图坐标系统</p>
<p>Please note that the script is designed in a way that you need to
first define the maximum viewBox. If you want to initally start the
application with an already zoomed in viewBox, you should still fill in
the full values in the initial SVG file and later call the <tt>mainMap.setNewViewBox()</tt> method as described below.</p> 

<h5>步骤三：为主地图和引用地图添加静态地理信息</h5>
<p>In order to verify that our tool works correctly, it is useful to
add some simple base geometry (raster or vector) both to our main map
and the reference map. The geometry within the reference map should be
very basic and generalized and serves only as a basic orientation. It
should be small in filesize and need not be very accurate. Within the
main map, you may place single elements (e.g. image or path) or whole
groups within the group with the id "mainMapGroup". Please do not place
them outside of this group or the panning tool will not work. You
should bear in mind, that our coordinate system <b>inverts the y-axis</b>. If you convert from GIS data you should add a minus sign in front of the y-coordinates. Our <a href="http://www.carto.net/papers/svg/utils/shp2svg/" target="_blank">Arcview Shapefile to SVG converter</a>
does this for you. Alternatively, to quickly see any results, you could
use a georeferenced raster image (jpeg or png) as it can be exported
from any GIS system. You may consult the existing geometry in our
Yosemite map as a reference. In order to toggle layer visibility, it is
necessary to set a unique id to the group or elements within the main
maps. (see step 6)</p>

 <h5>步骤四: 调整JavaScript中的init函数</h5>
<p>Next we'll have a look into the script section of the file
index.svg. The two global variable definitions as listed here need to
stay there, otherwise the script is not guaranteed to work. Within the <tt>init</tt> function, the two lines <tt>var dynamicLayers = new Array();</tt> and <tt>var digiLayers = new Array();</tt>
need to stay there. These are currently empty arrays that can later be
used, 如果你想添加动态层 (从数据库加载) 或用于数字标注的可编辑层。现在，we'll leave them as empty
arrays, that are handed over to the <tt>map</tt> object (<tt>mainMap</tt>)
defined in the next line. The map object holds various data on the map
and also enables the zooming and panning tools. As parameters we send
the following data:</p>
<p>Constructor of map object in order of the parameters to be passed over:</p>
<ul>
	<li><tt>mapName (string):</tt> id of the mainMap (nested svg)</li>
	<li><tt>maxWidth (number, viewBox coordinates):</tt> maximum mapWidth defined in the inner viewBox coordinates (map units)</li>
	<li><tt>minWidth (number, viewBox coordinates):</tt> minimum mapWidth defined in the inner viewBox coordinates (map units)</li>
	<li><tt>zoomFact (number):</tt>
a zoomStep factor (between 0 and 1), the zoomStep factor defines how
much we'll zoom in and out when pressing the plus/minus buttons. A
value of 0.6 means, that after zooming in, the next map extent is 60%
of the previous extent.</li>
	<li><tt>nrDecimals (number, integer):</tt> the number of decimals to be displayed or used during digitizing</li>
	<li><tt>epsg (number, integer):</tt>
the epsg projection nr of the map, this can be used to build URL
strings for loading data from OGC services or spatial databases, you
can use any number if you don't plan to use the epsg code</li>
	<li><tt>units (string):</tt>
a string containing the map units (e.g. "m" for meters or
String.fromCharCode(176) for degrees). You may hand over an empty
string ("") if you don't want to display the map units</li>
	<li><tt>unitsFactor (number):</tt>
a factor that can be used to add a factor when outputting coordinates
on mouse move, can be used e.g. to convert feet to meter or vice versa.
Use a factor of 1 if you don't use different units</li>
	<li><tt>showCoords (boolean):</tt> true|false, defines whether you want to use the showCoordinates function to display coordinates on mouse-move</li>
	<li><tt>coordXId (string):</tt> the id of the text element for displaying the east values</li>
	<li><tt>coordYId (string):</tt> the id of the text element for displaying the north values</li>
	<li><tt>dynamicLayers (Array of strings):</tt>
an array containing group ids of dynamic layers to be loaded from a
database; you may hand over an empty array, if you do not want to load
data from databases</li>
	<li><tt>digiLayers (Array of strings):</tt> an array containing digitizing layers (currently empty)</li>
	<li><tt>activeDigiLayer (string):</tt> the id of the active digitizing layer (currently an empty string)</li>
	<li><tt>zoomRectAttribs (Array of literals with presentation attributes):</tt> presentation attributes defining the look of the zoom rectangle used in manual zooming; note that <tt>stroke-width</tt> and <tt>stroke-dasharray</tt> attributes are interpreted relative to the current map width, note that the syntax of the <tt>stroke-dasharray</tt>
attribute is very strict (stricter than the specification, only "," are
allowed as separators) since we use a relative primitive split
mechanism for splitting the values; example: <tt>var zoomRectStyles = {"fill":"none","stroke":"crimson","stroke-width":0.002,"stroke-dasharray":"0.012,0.002"};</tt></li>
	<li><tt>highlightAttribs (Array of literals with presentation attributes):</tt> presentation attributes defining the look of the crosshair lines for highlighting point features; should at least contain a <tt>stroke</tt> and <tt>stroke-width</tt> attribute, note that <tt>stroke-width</tt> and <tt>stroke-dasharray</tt> attributes are interpreted relative to the current map width, note that the syntax of the <tt>stroke-dasharray</tt>
attribute is very strict (stricter than the specification, only "," are
allowed as separators) since we use a relative primitive split
mechanism for splitting the values; example: <tt>var highlightStyles = {"stroke":"crimson","stroke-width":0.002};</tt></li>
	<li><tt>dragRectAttribs (Array of literals with presentation attributes):</tt>
presentation attributes defining the look of the dragable rectangle
indicating the current map extent in the reference map; should at least
contain either a <tt>stroke</tt> or <tt>fill</tt> attribute, note that <tt>stroke-width</tt> and <tt>stroke-dasharray</tt> attributes are interpreted relative to the current map width, note that the syntax of the <tt>stroke-dasharray</tt>
attribute is very strict (stricter than the specification, only "," are
allowed as separators) since we use a relative primitive split
mechanism for splitting the values; example: <tt>var dragRectStyles = {"fill":"lightskyblue","fill-opacity":0.5};</tt></li>
	<li><tt>refmapName (string):</tt> the id of the linked reference map</li>
	<li><tt>dragSymbol (string):</tt>
the id of the symbol element that is displayed when the user zooms in
very far, when reaching a certain threshold level this symbol is
displayed in addition to the rectangle (that would be probably too
small to be salient)</li>
	<li><tt>symbolThreshold (number, viewBox units):</tt>
the threshold value defined in viewBox units (width of the drag
rectangle), if the drag rectangle is smaller than this treshold, the
dragSymbol will be displayed</li>
</ul>
<p>Example: </p><pre><tt>//define some styles for the map object
var zoomRectStyles = {"fill":"none","stroke":"crimson","stroke-width":0.002,"stroke-dasharray":"0.012,0.002"};
var highlightStyles = {"stroke":"crimson","stroke-width":0.002};
var dragRectStyles = {"fill":"lightskyblue","fill-opacity":0.5};
myMainMap = new map("mainMap",64000,640,0.6,0,26911,"m",1,true,"coordX","coordY",dynamicLayers,digiLayers,"",zoomRectStyles,highlightStyles,dragRectStyles,"referenceMap","myDragCrossSymbol",4750);</tt></pre><p></p>

      	<p>In
the next line we'll invoke the zoomSlider. We add the slider object
instance as a property of the myMapApp object instance to avoid more
global variables. We'll hand over the following parameters:</p>
<p>Constructor of slider object in order of the parameters to be passed over:</p>
<ul>
	<li><tt>x1:</tt> x coordinate of the slider start point</li>
	<li><tt>y1:</tt> y coordinate of the slider start point</li>
	<li><tt>value1:</tt> the value of the slider start point (the minimum width at maximal zoom in)</li>
	<li><tt>x2:</tt> x coordinate of the slider end point</li>
	<li><tt>y2:</tt> y coordinate of the slider end point</li>
	<li><tt>value2:</tt> the value of the slider end point (the maximum width at full view)</li>
	<li><tt>startVal:</tt> the slider start value (in our case myMainMap.origWidth)</li>
	<li><tt>sliderGroupId:</tt>
the id of the group where we will place the slider (in our case
mapZoomSlider, part of the group containing the navigation tools)</li>
	<li><tt>sliderColor:</tt> the color of the slider line (defined verbally or in rgb)</li>
	<li><tt>visSliderWidth:</tt> the width of the slider line</li>
	<li><tt>invisSliderWidth:</tt>
the width of an invisible slider line receiving the slider events (for
very thin slider lines, the width should be considerably bigger)</li>
	<li><tt>sliderSymb:</tt> the id of a slider symbol (in our case "sliderSymbol")</li>
	<li><tt>functionToCall:</tt> the function or object to be called when the slider value was changed (in our case the "<tt>myMapApp.refMapDragger</tt>" object instance)</li>
	<li><tt>mouseMoveBool:</tt> a boolean flag indicating if we want instant feedback while moving the slider or no (in our case true).</li>
</ul>
<p>Example: </p><pre><tt>myMapApp.zoomSlider = new slider(710,70,myMainMap.minWidth,710,170,myMainMap.maxWidth,myMainMap.maxWidth,
"mapZoomSlider","dimgray",2,10,"sliderSymbol","myRefMapDragger.resizeDragger",true);</tt></pre><p></p>

 <p>Next you need to reposition or adapt your navigation tool buttons to fit in your map layout. All buttons make use of the <a href="http://www.carto.net/papers/svg/gui/button" class="inpage">button object</a>.
They are created per script. Some of the buttons are implemented as
simple "button" objects, some of them are "switchbutton" objects. For
details of the button properties and methods please see the following <a href="http://www.carto.net/papers/svg/gui/button/">documentation</a>.
You can adapt the look and feel of the button and symbol instances
using presentation attributes or CSS styles. All symbol definitions are
implemented with <tt>&lt;symbols /&gt;</tt> (residing in the <tt>&lt;defs /&gt;</tt>
section). Each button also needs an empty group in the DOM hierarchy
where the new button geometry can be appended. This empty group needs a
unique id which has to match the parameter one in the button
constructor. In our example, look for the group after the XML comment
line <tt>&lt;!-- this group holds symbol instances for navigation tools --&gt;</tt>. To reposition all buttons as a whole group you may add transform attributes on the parent group of the button groups (e.g. <tt>transform="translate(10 10)"</tt>).
Please note that you should change the button settings with care. You
should only adapt the position, width and styles of the button, and not
the related function calls or ids, otherwise the navigation functions
won't work. If you want to delete one button, it is better to set the
display or visibility of that group to "none" or "invisible", otherwise
you would have to modify the navigation scripts.</p>
<pre>myMapApp.buttons = new Array();
</pre>
      	<p>This line creates a new array in our global "myMapApp" object instance to hold all references to the zoom and pan buttons.</p>
      	
 <p>Constructor of button object see <a href="http://www.carto.net/papers/svg/gui/button/">button documentation</a>.</p>

<p>Example: </p><pre><tt>//button styles, adopt the style settings to match your needs
var buttonTextStyles = {"font-family":"Arial,Helvetica","fill":"dimgray","font-size":10};
var buttonStyles = {"fill":"white"};
var shadeLightStyles = {"fill":"rgb(235,235,235)"};
var shadeDarkStyles = {"fill":"dimgray"};
//button instance creation
myMapApp.buttons["zoomIn"] = new button("zoomIn","zoomIn",zoomImageButtons,"rect",undefined,"magnifyerZoomIn",705,47,20,20,buttonTextStyles,buttonStyles,shadeLightStyles,shadeDarkStyles,1);</tt></pre><p></p>

<p>Note that we use both <tt>button</tt> and <tt>switchbutton</tt>
objects that have slightly different constructors and behaviour. Note
the way how we create the Array of Literals defining the presentation
attributes of the button look.</p>     	
<pre>myMainMap.checkButtons();
</pre>
      	<p>After creating the buttons we call the <tt>.checkButtons()</tt>
method of the myMainMap object instance. This method analyzes the
current map extents and disables/enables buttons. In some situations
buttons should not be active. As an example, if the map is in full
view, the "zoomOut", "panManual" and "recenterMap" buttons are
deactivated. This method is called after each change of the map extent.</p>
      	
      	<p>The last line calls the function <tt>loadProjectSpecific()</tt>.
This function is always called, after resetting the map extent, e.g.
after zooming and panning. In this function you can react to the
changed map extent. In our example we reset the numbers indicating
width and height of the map extent and change the line-width of the
national park boundary to a fraction of 0.005 of the current map
extent. If you remove the park boundary from the mainMap layers, you
should also remove the last line in this function, otherwise you will
get error messages. If you dynamically load map layers from databases
or webservices, you can use this function to update the map geometry.
This is described in the tutorial <a href="http://www.carto.net/papers/svg/postgis_geturl_xmlhttprequest/" class="inpage">Dynamic Loading of Vector Geodata for SVG Mapping Applications Using Postgis, PHP and getURL()/XMLHttpRequest()</a>.</p>
<p>You should now test the functionality of the zoom and pan tools
again. If you receive error messages, or something behaves strange,
please check back with the instructions above.</p>

<h5>步骤五: 调整可控制图层可见性的选择按钮Adjusting checkBoxes to toggle layer visibility</h5>
<p>In a next step we want to toggle the visibility of our map layers.
Within "index.svg" search for the section containing the checkboxes.
You should find something similar to the following:</p>
<pre><tt>&lt;!-- control map layer visibility with checkBoxes --&gt;
&lt;g transform="translate(590 225)" id="checkBoxes"&gt;
	&lt;text font-family="Arial,Helvetica" fill="dimgray" font-size="18px" font-weight="bold" x="-10" y="0" pointer-events="none"&gt;Map Layer Controls&lt;/text&gt;
	&lt;!-- the checkbox geometries will be added here --&gt;
&lt;/g&gt;</tt>
</pre>

<p>This is the group where you should place the checkBoxes that will be created by script. Of course you should adjust the <tt>transform</tt> attribute of the group element. Next, have a look at the script section (function <tt>init</tt>) and look for the following lines:</p>

<pre><tt>//create checkbox array
myMapApp.checkBoxes = new Array();
//labeltext styles
var labeltextStyles = {"font-family":"Arial,Helvetica","fill":"dimgray","font-size":15};
//create individual checkboxes
myMapApp.checkBoxes["park_boundary"] = new checkBox("park_boundary","checkBoxes",0,20,"checkBoxRect","checkBoxCross",true,"Park Boundary",labeltextStyles,12,6,undefined,toggleMapLayer);
myMapApp.checkBoxes["ShadedRelief"] = new checkBox("ShadedRelief","checkBoxes",200,20,"checkBoxRect","checkBoxCross",true,"Shaded Relief",labeltextStyles,12,6,undefined,toggleMapLayer);</tt>
</pre>

<p>First, you create an array for <tt>checkBox</tt> elements in the
global myMapApp object instance. Next you define the styles, similar to
what we have discussed above, and finally you add checkBox instances
following the instructions at <a href="http://www.carto.net/papers/svg/gui/checkbox_and_radiobutton/" class="inpage">the checkbox and radiobutton tutorial</a>.</p>

<h5>步骤六：最终的布局与样式</h5>
<p>In this last step you need to work on the styling of the map layout.
Simply replace all the fill, stroke, opacity, font-attributes, etc. as
you like. Next to these XML attributes you might want to adjust
positions of layout elements and add map titles, imprint, data sources,
etc. Note that it is easier to move elements in groups, e.g. <tt>&lt;g transform="translate(50 100)"&gt;</tt> For positioning elements and testing the functionality of the navigation tools it is recommended to use <a href="http://xml.apache.org/batik/" class="expage">Apache Batik</a>
since it displays the viewBox coordinates in the status bar of the
squiggle browser. Additionally, it offers usually more meaningful error
messages than other browsers and it features a js script debugger.</p>	
	<h4>Constructors</h4>
	
<p>See in the section above (step 4).</p>	
        <h4>Selected Useful Methods of the <tt>map</tt> Object and Other Functions</h4>
        <ul>
		<li><tt>.setNewViewBox(xmin,ymin,xmax,ymax,history)</tt>:<br>resets
the map extent to your new given map extent. As parameters you define
the two corners as number values. Note that you should use the map
coordinate system (most of the time positive values, on the northern
hemisphere), which means that ymin is "bottom of the map" and "ymax" is
"top of the map". If your defined rectangle does not match the ratio of
the map it will be changed to fully contain your given rectangle and
match the given width/height ratio of the main map. The method changes
the map extent of the mainMap and also resets the position of the
dragging rectangle in the reference map. The last parameter (<tt>history</tt>) takes the values <tt>true|false</tt> and indicates whether that given map extent should be stored in the history of map extents.</li>
		<li><tt>.calcCoord(evt)</tt>:<br>calculates map coordinates from the original evt.clientX/evt.clientY coordinates. As parameters you pass over the <tt>evt</tt>
object that also holds the coordinate values where the evt occured. The
result is a literal containing the east value ("x") and the north value
("y").</li>
		<li><tt>.pointTestWithin(xcoor,ycoor)</tt>:<br>checks if the given coordinate is within the current map extent, returns a <tt>boolean</tt>
value (true|false). Note that the ycoor should be given in the original
map coordinate system, not in the inverted one. It will be inverted
internally in the method to match the viewBox coordinate system.</li>
		<li><tt>.bboxTestWithin(SVGRect)</tt>:<br>checks if the given SVGRect is completely within the current map extent, returns a <tt>boolean</tt> value (true|false). The parameter is of type <tt>SVGRect</tt>, it can be returned e.g. by calling the method <tt>element.getBBox()</tt>. The SVGRect has to be in the same coordinate system like the content of myMainMap.</li>
		<li><tt>.bboxTestOverlaps(SVGRect)</tt>:<br>checks if the given SVGRect overlaps with the current map extent, returns a <tt>boolean</tt> value (true|false). The parameter is of type <tt>SVGRect</tt>, it can be returned e.g. by calling the method <tt>element.getBBox()</tt>. The SVGRect has to be in the same coordinate system like the content of myMainMap.</li>
		<li><tt>.highlightPosition(xcoor,ycoor,hlOverview)</tt>:<br>highlights
the given coordinate in the main map and reference map by placing a
crosshair with the given presentation attributes. The third parameter
is of type <tt>boolean</tt> (true|false) and defines whether the
location should be highlighted in the reference map or not. The
highlight cross disappears with the next zoom or pan action or if you
call the method <tt>.hideHighlightCross()</tt>.</li>
        <li><tt>.hideHighlightCross()</tt>:<br>hides the crosshair in the mainMap and referenceMap<br>
        </li><li><tt>.backwardExtent()</tt>:<br>goes
back to the previous map extent stored in the map extent history array,
only reacts if we aren't already at the first entry in the array<br>
        </li><li><tt>.forwardExtent()</tt>:<br>goes
forward to the next map extent stored in the map extent history array,
only reacts if we aren't already at the last entry in the array</li>
        <li><tt>checkButtons()</tt>:<br>analyzes
current map extent and changes activation state of zoom and pan
buttons. Normally you should not need this method, unless you purposly
change the button state from another script</li>
        <li><tt>stopNavModes()</tt>:<br>stops active navigation modes and goes back to the default <tt>info</tt> mode where zooming and panning is deactivated</li>
        <li><tt>.cleanUp()</tt>:<br>removes
all temporarily added elements and event listeners from the main map
and linked reference map. This method can be useful if you switch
between different views/settings, e.g. country/continent/world, where
you have to reset values and re-initialize the map object and dragObj.</li>
	</ul>
	<p><tt>showExtent()</tt>
is a standalone function that alerts the current map extent. In our
example this function is attached to the tiny rectangle in the lower
right corner of the mainMap. Clicking on that rectangle activates this
function. This function is dependent on the existance of the
"myMainMap" instance of the "map" object.</p> 
	
	<p><tt>loadProjectSpecific()</tt>
is a standalone function that is always called when the map extent
changes. It can be used to adjust dependent map elements accordingly or
restyle them in dependency of the current map width.</p> 
	
        <h4>Useful Properties of the Map Object</h4>
        <ul>
	<li><tt>.curxOrig</tt>:<br>holds the x value of the upper left corner of the current map extent</li>
	<li><tt>.curyOrig</tt>:<br>holds the y value of the upper left corner of the current map extent</li>
	<li><tt>.curWidth</tt>:<br>holds
the width of the current map extent; this value can e.g. be used to
resymbolize stroke width and text-sizes after resetting the map extent.
The function <tt>loadProjectSpecific()</tt> could be used for that purpose, because it is called every time the map extent changes.</li>
	<li><tt>.maxWidth</tt>:<br>holds the maximum width of the map when in full view</li>
	<li><tt>.minWidth</tt>:<br>holds the minimum width of the map when fully zoomed in</li>
	<li><tt>.nrDecimals</tt>:<br>holds the number of decimal places after the comma for the display of coordinates or accuracy, when in digitizing mode</li>
	<li><tt>.pixSize</tt>:<br>holds the size of one unit of the screen oriented coordinate system within the mainMap coordinate system</li>
	<li><tt>.timestamp</tt>:<br>holds
a timestamp containing the time when the user last zoomed or panned.
This is useful for dynamic data-loading in conjunction with .getUrl()</li>
	<li><tt>.nrLayerToLoad</tt>:<br>is
an associative array containing the number of dynamic layers to load.
key in the array is the current timestamp, value is the number of
dynamic layers still to be loaded. Value is zero if all layers are
loaded. This variable can be useful if you want to start a certain
action only after all dynamic layers are loaded.</li>
	<li><tt>.epsg</tt>:<br>the
epsg projection nr of the map, this can be used to build URL strings
for loading data from OGC services, such as WMS or spatial databases.</li>
        	<li><tt>.navStatus</tt>:<br>indicates the current zoom/pan mode. Possible values are: <tt>info</tt> (zoom and pan deactivated), <tt>zoomManual</tt> (manual zoom mode), <tt>panmanual</tt> (in manual pan mode), <tt>panmanualActive</tt> (currently in active panning mode), <tt>recenter</tt> (in map recentering mode)</li>
        	<li><tt>units</tt>:<br>a string value containing the current map units (e.g. "m" or "ft")</li>
        	<li><tt>unitsFactor</tt>:<br>a
factor to convert map units to output units to be used in the
coordinate calculations (e.g. to convert "m" to "ft" or vice versa)</li>
        	<li><tt>highlightVisible</tt>:<br>a boolean value (true|false) that indicates whether the highlight cross is visible or not</li>
  </ul>
	<h4>Current Limitations</h4>
        <ul>
        	<li>Currently, there is no automatic adaption of the main map to the window size</li>
        	<li>Currently,
the main map and the reference map must have the same width/height
ratio and need to exactly share the coordinate systems</li>
        </ul>
    <h4>Version history</h4>
    <ul>
    	<li>1.0: initial version</li>
    	<li>1.01 (2005-02-15): added <tt>cleanUp()</tt> method to <tt>map</tt> and <tt>dragObj</tt> object. Some fixes in the documentation.</li>
     	<li>1.02
(2005-02-20): fixed problem if user used a double click at buttons
instead of a single click. The second click of a double click is now
ignored, using the <tt>evt.detail</tt> property.</li>
     	<li>1.03 (2005-02-22): introduced <tt>timestamp</tt> and <tt>nrLayerToLoad</tt> array for dynamic loading (getUrl).</li>
     	<li>1.04
(2005-09-12): introduced a few changes with coordinate calculation to
support MozillaSVG, the changes require you to also upgrade the
mapApp.js file, introduced <tt>epsg</tt> and <tt>unitsFactor</tt> property based on a suggestion by Bruce Rindahl</li>
    	<li>1.1
(2005-10-05): introduced button object (see button.js file), introduced
zoom and pan "modes" for repeated actions in the same mode, introduced
history of map extents with the ability to go back and forth in the
list of previous map extents, some internal changes in the code (e.g.
less global variables), added experimental support for the batik SVG
1.2 "static" attribute to improve performance while panning the map,
introduced cursors to give better feedback to user actions</li>
    	<li>1.1.1
(2005-10-24): replaced all "class" and "style" attributes with simple
XML attributes to make the example render in SVG viewers that don't
support CSS</li>
    	<li>1.1.2 (2006-02-21): fixed a small problem
with the event handling in the overview map, navigation tools now run
fine with Opera9+ as well</li>
    	<li>1.2 (2006-05-08): dragObj is
now called directly from the map object (please remove it from the
initialization function of previous versions), new constructor
parameters, added method .pointTestWithin(xcoor,ycoor), added method
.highlightPosition(xcoor,ycoor,hlOverview) and method
.hideHighlightCross(); drag rectangle and drag symbol are now
automatically added (please remove them from previous projects if you
defined them in your svg file), event listeners are now automatically
added to the reference map (please remove previous event handler
attributes from your project, otherwise functions will fire twice); the
previous primitive checkbox object is now replaced with the more
sophisticated checkbox object available from the carto.net SVG GUI
section; updated and improved documentation</li>
    	<li>1.2.1
(2006-05-13): fixed a bug in the documentation, fixed a severe bug in
the helper_functions.js file, functions dd2dms() and dms2dd(); thanks
Bruce Rindahl for bug-reporting and providing fixes</li>
    	<li>1.2.2
(2006-06-08): fixed a bug in the .stopNavModes() function that would
prevent entering info mode after pressing the info button</li>
     	<li>1.2.3
(2006-06-19): changed the behaviour of the highlightCross, the
highlightCross is now automatically hidden after each zoom and pan;
highlightCross in main map now correctly disappears if coordinate
outside of main map; fixed a bug when repeatedly starting the same mode</li>
		<li>1.2.4 (2006-08-10): added methods .bboxTestWithin(bbox) and .bboxTestOverlaps(bbox); updated the slider object in index.svg</li>
 		<li>1.3
(2007-04-19): added evt.preventDefault() in
dragObj.prototype.handleEvent to prevent that a potential raster image
is dragged in the reference map (applies to Apple Safari); manual zoom
rectangle can now be drawn in all directions; the behavior of small
manual zoom rectangles was slightly changed</li>
 		<li>1.3.1
(2007-05-07): corrected a bug where coordinate display still happened
when the mouse cursor was above the reference map, even when the map
object instance had the showCoords property set to false</li>
 </ul></div>
<br><br><hr>
<table width="100%">
<tbody><tr>
<td align="left">Last modified: 

Monday, 07-May-2007 14:47:02 CEST
<br>© <a href="http://www.carto.net/#en_w3">carto<span class="expage">:</span>net</a> (<a href="http://www.carto.net/neumann/">andreas neumann</a> &amp; <a href="http://www.carto.net/andre.mw/">andré m. winter</a>)

<br>original URL for reference: http://www.carto.net/papers/svg/navigationTools/index.shtml</td>
<td align="right" valign="top"><a class="expage" href="javascript:location.href='http://del.icio.us/post?v=3&amp;url='+encodeURIComponent(location.href)+'&amp;title='+encodeURIComponent(document.title)"><img src="carto%20net%20-%20Navigation%20Tools%20for%20SVG%20Maps_files/delicious.gif" alt="del.icio.us" align="bottom" height="16" width="16">&nbsp;Add this page to del.icio.us</a></td>
</tr></tbody></table>
</body></html>